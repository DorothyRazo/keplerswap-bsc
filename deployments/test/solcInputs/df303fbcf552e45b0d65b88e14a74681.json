{
  "language": "Solidity",
  "sources": {
    "contracts/farm/Crycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '../interfaces/IKeplerFactory.sol';\nimport '../interfaces/IKeplerToken.sol';\nimport '../interfaces/IKeplerPair.sol';\nimport '../interfaces/IMasterChef.sol';\nimport '../interfaces/IUser.sol';\n\ncontract Crycle is Ownable {\n    using SafeMath for uint256;\n\n    struct CrycleInfo {\n        address creator;\n        string title;\n        string mainfest;\n        uint256 userNum;\n    }\n\n    struct VoteInfo {\n        uint voteId;\n        uint beginAt;\n        uint countAt;\n        uint finishAt;\n    }\n\n    VoteInfo[] public voteInfo;\n    mapping(uint256 => mapping(uint256 => uint256)) crycleVotes;\n    mapping(uint256 => mapping(uint256 => uint256)) crycleVoteUserNum;\n    mapping(uint256 => mapping(address => uint256)) userVotes;\n\n\n    CrycleInfo[] public crycleInfo;\n    mapping(uint256 => mapping(address => uint256)) public crycleUsers;\n    mapping(address => uint256) public userCrycle;\n    uint256 currentVoteId;\n\n    IUser public user;\n    IMasterChef public masterChef;\n    IKeplerPair public pair;\n    IERC20 public busd;\n    IERC20 public sds;\n    IKeplerFactory public factory;\n\n    uint256 constant public MIN_LOCK_AMOUNT = 500 * 1e18;\n    uint256 constant public MIN_INVITER_AMOUNT = 5000 * 1e18;\n\n    constructor(IUser _user, IMasterChef _masterChef, IKeplerPair _pair, IERC20 _busd, IERC20 _sds, IKeplerFactory _factory) {\n        crycleInfo.push(CrycleInfo({\n            creator: address(this),\n            title: \"\",\n            mainfest: \"\",\n            userNum: 0\n        }));\n        voteInfo.push(VoteInfo({\n            voteId: 0,\n            beginAt: block.timestamp,\n            countAt: block.timestamp,\n            finishAt: block.timestamp\n        }));\n        user = _user;\n        masterChef = _masterChef;\n        pair = _pair;\n        busd = _busd;\n        sds = _sds;\n        factory = _factory;\n    }\n\n    function getPairTokenPrice(IKeplerPair _pair, IERC20 token) internal view returns(uint price) {\n        address token0 = _pair.token0();\n        address token1 = _pair.token1();\n        require(token0 == address(token) || token1 == address(token), \"illegal token\");\n        (uint reserve0, uint reserve1,) = _pair.getReserves();\n        if (address(token) == token0) {\n            if (reserve0 != 0) {\n                return IERC20(token0).balanceOf(address(_pair)).mul(1e18).div(reserve0);\n            }\n        } else if (address(token) == token1) {\n            if (reserve1 != 0) {\n                return IERC20(token1).balanceOf(address(_pair)).mul(1e18).div(reserve1);\n            }\n        }\n        return 0;\n    }\n\n    function canCreateCrycle(address _user) internal view returns (bool) {\n        uint price = getPairTokenPrice(pair, busd);\n        uint balanceUser = masterChef.getUserAmount(pair, _user, 3);\n        uint balanceInviter = masterChef.getInviterAmount(pair, _user);\n        if (balanceUser.mul(price).div(1e18) >= MIN_LOCK_AMOUNT || balanceInviter.mul(price).div(1e18) >= MIN_INVITER_AMOUNT) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createCrycle(string memory title, string memory mainfest) external {\n        require(bytes(title).length <= 32, \"title too long\");\n        require(bytes(mainfest).length <= 1024, \"mainfest too long\");\n        require(canCreateCrycle(msg.sender), \"at lease lock 500 BUSD and SDS or invite 5000 BUSD and SDS\");\n        crycleInfo.push(CrycleInfo({\n            creator: msg.sender,\n            title: title,\n            mainfest: mainfest,\n            userNum: 0\n        }));\n    }\n\n    function addCrycle(uint256 crycleId) external {\n        require(crycleId > 0 && crycleId < crycleInfo.length, \"illegal crycleId\");\n        require(userCrycle[msg.sender] == 0, \"already in crycle\");\n        crycleUsers[crycleId][msg.sender] = block.timestamp;\n        userCrycle[msg.sender] = crycleId;\n        crycleInfo[crycleId].userNum = crycleInfo[crycleId].userNum.add(1);\n    }\n\n    function startVote() external onlyOwner {\n        uint _currentVoteId = nextVoteId();\n        setNextVoteId();\n        if (_currentVoteId > 1 && voteInfo[_currentVoteId - 1].finishAt > block.timestamp) {\n            require(false, \"last vote not finish\");\n        }\n        masterChef.createSnapshot(_currentVoteId);\n        IKeplerToken(address(sds)).createSnapshot(_currentVoteId);\n        factory.createSnapshot(address(pair), _currentVoteId);\n        voteInfo.push(VoteInfo({\n            voteId: _currentVoteId,\n            beginAt: block.timestamp,\n            countAt: block.timestamp + 5 * 24 * 3600,\n            finishAt: block.timestamp + 7 * 24 * 3600\n        }));\n    }\n\n    function doVote(uint num) external {\n        uint tokenVotes = IKeplerToken(address(sds)).getUserSnapshot(msg.sender);\n        (uint price0, uint price1) = factory.getSnapshotPrice(pair);\n        uint price = address(sds) == pair.token0() ? price0 : price1;\n        uint pairVotes = factory.getSnapshotBalance(pair, msg.sender);\n        uint lockVotes = masterChef.getUserSnapshot(address(pair), msg.sender);\n        uint totalVotes = tokenVotes.add(price.mul(pairVotes.div(1e18))).add(price.mul(lockVotes).div(1e18)).mul(100);\n        if (crycleVotes[currentVoteId][userCrycle[msg.sender]] == 0) {\n            crycleVoteUserNum[currentVoteId][userCrycle[msg.sender]] = crycleVoteUserNum[currentVoteId][userCrycle[msg.sender]].add(1);\n        }\n        crycleVotes[currentVoteId][userCrycle[msg.sender]] = crycleVotes[currentVoteId][userCrycle[msg.sender]].add(num);\n        userVotes[currentVoteId][msg.sender] = userVotes[currentVoteId][msg.sender].add(num);\n        require(userVotes[currentVoteId][msg.sender] <= totalVotes, \"illegal vote num\");\n    }\n\n    function nextVoteId() public view returns (uint256) {\n        return currentVoteId.add(1);\n    }\n\n    function setNextVoteId() internal {\n        currentVoteId = currentVoteId.add(1);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IKeplerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport './IKeplerPair.sol';\n\ninterface IKeplerFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function expectPairFor(address token0, address token1) external view returns (address);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\n\n    function getTransferFee(address[] memory tokens) external view returns (uint[] memory);\n\n    function _beforeTokenTransfer(address token0, address token1, address from, address to, uint256 amount) external;\n\n    function createSnapshot(address pair, uint256 id) external;\n\n    function getUserSnapshot(address user) external view returns (uint256);\n\n    function getSnapshotPrice(IKeplerPair pair) external view returns(uint price0, uint price1);\n\n    function getSnapshotBalance(IKeplerPair pair, address user) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IKeplerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport './IKeplerPair.sol';\n\ninterface IKeplerToken {\n\n    function createSnapshot(uint256 id) external;\n\n    function getUserSnapshot(address user) external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IKeplerPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\ninterface IKeplerPair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport './IKeplerPair.sol';\n\ninterface IMasterChef {\n\n    function getUserAmount(IKeplerPair pair, address user, uint lockType) external view returns (uint);\n\n    function getInviterAmount(IKeplerPair pair, address inviter) external view returns (uint);\n\n    function createSnapshot(uint256 id) external;\n\n    function getUserSnapshot(address pair, address _user) external view returns (uint256);\n\n    function doMiner(IKeplerPair pair, IERC20 token, uint256 amount) external;\n\n    function deposit(IKeplerPair _pair, uint256 _amount, uint256 _lockType) external;\n\n    function depositFor(IKeplerPair _pair, uint256 _amount, uint256 _lockType, address to) external;\n\n    function getPoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare);\n\n    function getUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending);\n\n    function getInvitePoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare);\n\n    function getInviteUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending);\n\n    function doInviteMiner(IKeplerPair pair, IERC20 token, uint256 amount) external;\n\n    function userLockNum(IKeplerPair _pair, address user) external view returns (uint256);\n\n    function userLockInfo(IKeplerPair _pair, address _user, uint256 id) external view returns (uint256, uint256, uint256, uint256);\n}\n"
    },
    "contracts/interfaces/IUser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\ninterface IUser {\n\n    function inviter(address user) external view returns (address);\n\n    function inviteNume(address user) external view returns (uint256);\n\n    function userNum() external view returns (uint256);\n\n    function registe(address _inviter) external;\n\n    function userExists(address user) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/lens/Lens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '../interfaces/IKeplerPair.sol';\nimport '../interfaces/IMasterChef.sol';\nimport '../interfaces/IUser.sol';\nimport '../interfaces/IInviter.sol';\nimport 'hardhat/console.sol';\n\ncontract Lens is Ownable {\n    using SafeMath for uint256;\n\n    struct UserLockInfo {\n        uint amount;\n        uint shares;\n        uint lockType;\n        uint expireAt;\n    }\n\n    function getLockInfo(IMasterChef _masterChef, IKeplerPair _pair, address user, uint from, uint size) external view returns (UserLockInfo[] memory) {\n        uint totalNum = _masterChef.userLockNum(_pair, user);\n        size = totalNum.sub(from) > size ? size : totalNum.sub(from);\n        UserLockInfo[] memory res = new UserLockInfo[](size);\n        uint to = from.add(size);\n        uint currentId = 0;\n        for (uint i = from; i < to; i ++) {\n            (res[currentId].amount, res[currentId].shares, res[currentId].lockType, res[currentId].expireAt) = _masterChef.userLockInfo(_pair, user, i);\n            currentId = currentId.add(1);\n        }\n        return res;\n    }\n\n    function pendingMine(IMasterChef _masterChef, IKeplerPair _pair, address _token, address _user) external view returns (uint256) {\n        address token0 = _pair.token0();\n        address token1 = _pair.token1();\n        if (_token == token0) {\n            (, uint256 acc,) = _masterChef.getPoolInfo(_pair);\n            (, uint256 shares, uint256 debt, , uint256 pending, ) = _masterChef.getUserInfo(_pair, _user);\n            return acc.mul(shares).div(1e18).sub(debt).add(pending);\n        } else if (_token == token1) {\n            (, , uint256 acc) = _masterChef.getPoolInfo(_pair);\n            (, uint256 shares, , uint256 debt, , uint256 pending) = _masterChef.getUserInfo(_pair, _user);\n            return acc.mul(shares).div(1e18).sub(debt).add(pending);\n        } else {\n            require(false, \"illegal token\");\n        }\n    }\n\n    function pendingInviteMine(IMasterChef _masterChef, IKeplerPair _pair, address _token, address _user) external view returns (uint256) {\n        address token0 = _pair.token0();\n        address token1 = _pair.token1();\n        (uint amount, , , , ,) = _masterChef.getUserInfo(_pair, _user);\n        if (amount == 0) {\n            return 0;\n        }\n        if (_token == token0) {\n            (, uint256 acc,) = _masterChef.getInvitePoolInfo(_pair);\n            (, uint256 shares, uint256 debt, , uint256 pending, ) = _masterChef.getInviteUserInfo(_pair, _user);\n            return acc.mul(shares).div(1e18).sub(debt).add(pending);\n        } else if (_token == token1) {\n            (, , uint256 acc) = _masterChef.getInvitePoolInfo(_pair);\n            (, uint256 shares, , uint256 debt, , uint256 pending) = _masterChef.getInviteUserInfo(_pair, _user);\n            return acc.mul(shares).div(1e18).sub(debt).add(pending);\n        } else {\n            require(false, \"illegal token\");\n        }\n    }\n\n    function pendingInvite(IInviter _inviter, address _token, address _user) external view returns (uint256) {\n        return _inviter.profits(_user, _token);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IInviter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport './IKeplerPair.sol';\n\ninterface IInviter {\n\n    function profits(address user, address token) external view returns (uint);\n\n    function doHardWork(address _user, address _token, uint256 _amount) external;\n\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/token/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport \"hardhat/console.sol\";\n\ncontract MockToken is ERC20, Ownable {\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\n        if (decimals_ != 18) {\n            _setupDecimals(decimals_);\n        }\n    }\n\n    function mint (address to_, uint amount_) public {\n        _mint(to_, amount_);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/token/KeplerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport \"hardhat/console.sol\";\n\ncontract KeplerToken is ERC20, Ownable {\n    \n    uint256 public currentSnapshotId;\n    mapping(address => uint256) userSnapshotId;\n    mapping(address => uint256) userSnapshotAmount;\n    address snapshotCreateCaller;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\n        if (decimals_ != 18) {\n            _setupDecimals(decimals_);\n        }\n    }\n\n    function setSnapshotCreateCaller(address _snapshotCreateCaller) external onlyOwner {\n        snapshotCreateCaller = _snapshotCreateCaller;\n    }\n\n    function mint (address to_, uint amount_) public {\n        _mint(to_, amount_);\n    }\n\n    function createSnapshot(uint256 id) external {\n        require(msg.sender == snapshotCreateCaller, \"only snapshotCreateCaller can do this\");\n        require(id > currentSnapshotId, \"illegal snapshotId\");\n        currentSnapshotId = id; \n    }\n\n    function getUserSnapshot(address user) external view returns (uint256) {\n        if (currentSnapshotId == 0) {\n            return balanceOf(user);\n        } else if (userSnapshotId[user] == currentSnapshotId) {\n            return userSnapshotAmount[user];\n        } else {\n            return balanceOf(user);\n        }\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\n        if (false) {\n            amount;\n        }\n        if (currentSnapshotId == 0) {\n            return;\n        }\n        if (userSnapshotId[from] < currentSnapshotId) {\n            userSnapshotAmount[from] = balanceOf(from);\n            userSnapshotId[from] = currentSnapshotId;\n        }\n        if (userSnapshotId[to] < currentSnapshotId) {\n            userSnapshotAmount[to] = balanceOf(to);\n            userSnapshotId[to] = currentSnapshotId;\n        }\n    }\n}\n"
    },
    "contracts/user/User.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\ncontract User {\n    using SafeMath for uint256;\n\n    mapping(address => address) public inviter;\n    mapping(address => uint256) public inviteNum;\n    uint256 public userNum;\n\n    constructor() {\n    }\n\n    function registe(address _inviter) external {\n        if (userNum > 0) {\n            require(inviter[_inviter] != address(0), \"inviter not exists\");\n        }\n        inviter[msg.sender] = _inviter;\n        userNum = userNum.add(1);\n        inviteNum[_inviter] = inviteNum[_inviter].add(1);\n    }\n\n    function userExists(address user) external view returns (bool) {\n        return inviter[user] != address(0);\n    }\n}\n"
    },
    "contracts/swap/KeplerRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '../interfaces/IKeplerRouter.sol';\nimport '../interfaces/IKeplerFactory.sol';\nimport '../libraries/KeplerLibrary.sol';\nimport '../libraries/TransferHelper.sol';\nimport '../interfaces/IWETH.sol';\nimport '../interfaces/IFeeDispatcher.sol';\nimport '../interfaces/IMasterChef.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport 'hardhat/console.sol';\ncontract KeplerRouter is IKeplerRouter {\n    using SafeMath for uint256;\n\n    address public immutable override factory;\n    address public immutable override WETH;\n    IMasterChef public masterChef;\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'BabyRouter: EXPIRED');\n        _;\n    }\n\n    constructor(address _factory, address _WETH, IMasterChef _masterChef) {\n        factory = _factory;\n        WETH = _WETH;\n        masterChef = _masterChef;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) private returns (uint amountA, uint amountB) {\n        // create the pair if it doesn't exist yet\n        if (IKeplerFactory(factory).getPair(tokenA, tokenB) == address(0)) {\n            IKeplerFactory(factory).createPair(tokenA, tokenB);\n        }\n        (uint reserveA, uint reserveB) = KeplerLibrary.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = KeplerLibrary.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'KeplerRouter: INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = KeplerLibrary.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'KeplerRouter: INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        uint lockType\n    ) external override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        address pair = KeplerLibrary.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        if (address(masterChef) != address(0)) {\n            liquidity = IKeplerPair(pair).mint(address(this));\n            IKeplerPair(pair).approve(address(masterChef), liquidity);\n            masterChef.depositFor(IKeplerPair(pair), liquidity, lockType, to);\n        } else {\n            liquidity = IKeplerPair(pair).mint(to);\n        }\n    }\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        uint lockType\n    ) external override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = KeplerLibrary.pairFor(factory, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = IKeplerPair(pair).mint(to);\n        if (address(masterChef) != address(0)) {\n            liquidity = IKeplerPair(pair).mint(address(this));\n            IKeplerPair(pair).approve(address(masterChef), liquidity);\n            masterChef.depositFor(IKeplerPair(pair), liquidity, lockType, to);\n        } else {\n            liquidity = IKeplerPair(pair).mint(to);\n        }\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH); // refund dust eth, if any\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public override ensure(deadline) returns (uint amountA, uint amountB) {\n        address pair = KeplerLibrary.pairFor(factory, tokenA, tokenB);\n        IKeplerPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        (uint amount0, uint amount1) = IKeplerPair(pair).burn(to);\n        (address token0,) = KeplerLibrary.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'KeplerRouter: INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'KeplerRouter: INSUFFICIENT_B_AMOUNT');\n    }\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public override ensure(deadline) returns (uint amountToken, uint amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, amountToken);\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(uint[] memory amounts, address[] memory path, address _to) private {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = KeplerLibrary.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? KeplerLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            IKeplerPair(KeplerLibrary.pairFor(factory, input, output)).swap(amount0Out, amount1Out, to);\n        }\n    }\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external override ensure(deadline) returns (uint[] memory amounts) {\n        uint256[] memory fees = IKeplerFactory(factory).getTransferFee(path);\n        amounts = KeplerLibrary.getAmountsOut(factory, amountIn, path, fees);\n        address feeTo = IKeplerFactory(factory).feeTo();\n        for (uint i = 0; i < fees.length - 1; i ++) {\n            if (fees[i] == 0) continue;\n            uint fee = amounts[i].mul(fees[i]).div(1000);\n            console.log(\"fee amount: \", fee);\n            TransferHelper.safeTransferFrom(path[i], msg.sender, address(this), fee);\n            IERC20(path[i]).approve(feeTo, fee);\n            IFeeDispatcher(feeTo).doHardWork(KeplerLibrary.pairFor(factory, path[i], path[i + 1]), path[i], msg.sender, fee);\n            amounts[i] = amounts[i].sub(fee);        \n        }\n        require(amounts[amounts.length - 1] >= amountOutMin, 'KeplerRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(path[0], msg.sender, KeplerLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, to);\n    }\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external override ensure(deadline) returns (uint[] memory amounts) {\n        uint256[] memory fees = IKeplerFactory(factory).getTransferFee(path);\n        amounts = KeplerLibrary.getAmountsIn(factory, amountOut, path, fees);\n        address feeTo = IKeplerFactory(factory).feeTo();\n        for (uint i = 0; i < fees.length - 1; i ++) {\n            IERC20(path[i]).approve(feeTo, fees[i]);\n            IFeeDispatcher(feeTo).doHardWork(KeplerLibrary.pairFor(factory, path[i], path[i + 1]), path[i], msg.sender, fees[i]);\n            amounts[i] = amounts[i].sub(fees[i]);        \n        }\n        require(amounts[0] <= amountInMax, 'KeplerRouter: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(path[0], msg.sender, KeplerLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, to);\n    }\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'KeplerRouter: INVALID_PATH');\n        uint256[] memory fees = IKeplerFactory(factory).getTransferFee(path);\n        amounts = KeplerLibrary.getAmountsOut(factory, msg.value, path, fees);\n        address feeTo = IKeplerFactory(factory).feeTo();\n        for (uint i = 0; i < fees.length - 1; i ++) {\n            IERC20(path[i]).approve(feeTo, fees[i]);\n            IFeeDispatcher(feeTo).doHardWork(KeplerLibrary.pairFor(factory, path[i], path[i + 1]), path[i], msg.sender, fees[i]);\n            amounts[i] = amounts[i].sub(fees[i]);        \n        }\n        require(amounts[amounts.length - 1] >= amountOutMin, 'KeplerRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(KeplerLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'BabyRouter: INVALID_PATH');\n        uint256[] memory fees = IKeplerFactory(factory).getTransferFee(path);\n        amounts = KeplerLibrary.getAmountsIn(factory, amountOut, path, fees);\n        address feeTo = IKeplerFactory(factory).feeTo();\n        for (uint i = 0; i < fees.length - 1; i ++) {\n            IERC20(path[i]).approve(feeTo, fees[i]);\n            IFeeDispatcher(feeTo).doHardWork(KeplerLibrary.pairFor(factory, path[i], path[i + 1]), path[i], msg.sender, fees[i]);\n            amounts[i] = amounts[i].sub(fees[i]);        \n        }\n        require(amounts[0] <= amountInMax, 'KeplerRouter: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(path[0], msg.sender, KeplerLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'KeplerRouter: INVALID_PATH');\n        uint256[] memory fees = IKeplerFactory(factory).getTransferFee(path);\n        amounts = KeplerLibrary.getAmountsOut(factory, amountIn, path, fees);\n        address feeTo = IKeplerFactory(factory).feeTo();\n        for (uint i = 0; i < fees.length - 1; i ++) {\n            IERC20(path[i]).approve(feeTo, fees[i]);\n            IFeeDispatcher(feeTo).doHardWork(KeplerLibrary.pairFor(factory, path[i], path[i + 1]), path[i], msg.sender, fees[i]);\n            amounts[i] = amounts[i].sub(fees[i]);        \n        }\n        require(amounts[amounts.length - 1] >= amountOutMin, 'KeplerRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(path[0], msg.sender, KeplerLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'KeplerRouter: INVALID_PATH');\n        uint256[] memory fees = IKeplerFactory(factory).getTransferFee(path);\n        amounts = KeplerLibrary.getAmountsIn(factory, amountOut, path, fees);\n        address feeTo = IKeplerFactory(factory).feeTo();\n        for (uint i = 0; i < fees.length - 1; i ++) {\n            IERC20(path[i]).approve(feeTo, fees[i]);\n            IFeeDispatcher(feeTo).doHardWork(KeplerLibrary.pairFor(factory, path[i], path[i + 1]), path[i], msg.sender, fees[i]);\n            amounts[i] = amounts[i].sub(fees[i]);        \n        }\n        require(amounts[0] <= msg.value, 'KeplerRouter: EXCESSIVE_INPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(KeplerLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]); // refund dust eth, if any\n    }\n}\n"
    },
    "contracts/interfaces/IKeplerRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\ninterface IKeplerRouter {\n    function factory() external view returns (address);\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        uint lockType\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        uint lockType\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n}\n"
    },
    "contracts/libraries/KeplerLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '../interfaces/IKeplerPair.sol';\nimport '../interfaces/IKeplerFactory.sol';\nimport 'hardhat/console.sol';\n/*\nimport \"./SafeMath.sol\";\n*/\nlibrary KeplerLibrary {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                IKeplerFactory(factory).INIT_CODE_PAIR_HASH()\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        pairFor(factory, tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IKeplerPair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'PancakeLibrary: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountOut) {\n        require(fee <= 1000, 'KeplerLibrary: ILLEGAL_TRANSFER_FEE');\n        require(amountIn > 0, 'KeplerLibrary: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'KeplerLibrary: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(uint(1000).sub(fee));\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountIn) {\n        require(fee <= 1000, 'KeplerLibrary: ILLEGAL_TRANSFER_FEE');\n        require(amountOut > 0, 'PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(uint(1000).sub(fee));\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path, uint256[] memory fees) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'KeplerLibrary: INVALID_PATH');\n        require(path.length == fees.length, 'KeplerLibrary: INVALID_FEE_LENGTH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, fees[i]);\n        }\n    }\n    \n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path, uint256[] memory fees) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'KeplerLibrary: INVALID_PATH');\n        require(path.length == fees.length, 'KeplerLibrary: INVALID_FEE_LENGTH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, fees[i - 1]);\n        }\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "contracts/interfaces/IFeeDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n/*\nimport '../libraries/SafeMath.sol';\nimport '../interfaces/IBEP20.sol';\nimport '../token/SafeBEP20.sol';\n\nimport \"../token/BabyToken.sol\";\nimport \"./SyrupBar.sol\";\n*/\n// import \"@nomiclabs/buidler/console.sol\";\n\ninterface IFeeDispatcher {\n\n    function tokenDestinationLength(address token) external view returns (uint256);\n\n    function defaultDestinationLength(address token) external view returns (uint256);\n\n    function addDefaultDestination(address destination, uint256 percent) external; \n\n    function delDefaultDestination(uint id) external;\n\n    function setDefaultDestination(uint id, uint percent) external;\n\n    function addTokenDestination(address token, address destination, uint256 percent) external;\n\n    function delTokenDestination(address token, uint id) external;\n\n    function setTokenDestination(address token, uint id, uint percent) external;\n    \n    function doMultilyHardwork(address[] memory tokens) external;\n\n    function doHardWork(address pair, address token, address user, uint256 amount) external;\n}\n"
    },
    "contracts/swap/KeplerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport './KeplerPair.sol';\nimport '../libraries/KeplerLibrary.sol';\nimport '../interfaces/IKeplerPair.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ncontract KeplerFactory is Ownable {\n    using SafeMath  for uint;\n\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(KeplerPair).creationCode));\n\n    address public feeTo;\n\n    mapping(address => mapping(address => address)) public getPair;\n    uint public allPairsLength;\n    bool public whiteListAvaliable;\n    mapping(address => bool) public whiteList;\n    uint public defaultTransferFee;\n    mapping(address => uint) public tokenTransferFee;\n    mapping(address => uint) public relateTransferFee;\n\n    uint256 public currentSnapshotId;\n    mapping(address => mapping(address => uint256)) userSnapshotId;\n    mapping(address => mapping(address => uint256)) userSnapshotAmount;\n    mapping(address => mapping(address => uint256)) pairSnapshotPrice;\n    address snapshotCreateCaller;\n\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    constructor() {\n    }\n\n    function setSnapshotCreateCaller(address _snapshotCreateCaller) external onlyOwner {\n        snapshotCreateCaller = _snapshotCreateCaller;\n    }\n\n    function setDefaultTransferFee(uint _defaultTransferFee) external onlyOwner {\n        defaultTransferFee = _defaultTransferFee;\n    }\n\n    function setTokenTransferFee(address token, uint256 fee) external onlyOwner {\n        tokenTransferFee[token] = fee; \n    }\n\n    function setRelateTransferFee(address token, uint256 fee) external onlyOwner {\n        relateTransferFee[token] = fee;\n    }\n\n    function getTransferFee(address[] memory tokens) external view returns (uint[] memory) {\n        uint[] memory fees = new uint[](tokens.length);\n        for (uint i = 0; i < tokens.length - 1; i ++) {\n            if (tokenTransferFee[tokens[i]] != 0) {\n                fees[i] = tokenTransferFee[tokens[i]];\n            } else if (relateTransferFee[tokens[i+1]] != 0) {\n                fees[i] = relateTransferFee[tokens[i+1]];\n            } else {\n                fees[i] = defaultTransferFee;\n            }\n        }\n        return fees;\n    }\n\n    function expectPairFor(address token0, address token1) external view returns (address) {\n        return KeplerLibrary.pairFor(address(this), token0, token1);\n    }\n\n    function isWhiteList(address token0, address token1) external view returns (bool) {\n        address pair = KeplerLibrary.pairFor(address(this), token0, token1);\n        return isWhiteList(pair);\n    }\n\n    function isWhiteList(address pair) internal view returns(bool) {\n        if (whiteListAvaliable) {\n            return whiteList[pair];\n        } else {\n            return true;\n        }\n    }\n\n    function createPair(address tokenA, address tokenB) public returns (address pair) {\n        require(tokenA != tokenB, 'Kepler: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'Kepler: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'Kepler: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(KeplerPair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        require(isWhiteList(pair), \"Kepler: NOT WHITELIST\");\n        IKeplerPair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairsLength = allPairsLength + 1;\n        emit PairCreated(token0, token1, pair, allPairsLength);\n    }\n\n    function setFeeTo(address _feeTo) external onlyOwner {\n        feeTo = _feeTo;\n    }\n\n    function createSnapshot(address pair, uint256 id) external {\n        require(msg.sender == snapshotCreateCaller, \"only snapshotCreateCaller can do this\");\n        currentSnapshotId = id; \n        address token0 = IKeplerPair(pair).token0();\n        address token1 = IKeplerPair(pair).token1();\n        (uint112 reserve0, uint112 reserve1,) = IKeplerPair(pair).getReserves();\n        if (reserve0 != 0) {\n            pairSnapshotPrice[pair][token0] = IERC20(token0).balanceOf(pair).mul(1e18).div(reserve0);\n        }\n        if (reserve1 != 0) {\n            pairSnapshotPrice[pair][token1] = IERC20(token1).balanceOf(pair).mul(1e18).div(reserve1);\n        }\n    }\n\n    function getSnapshotPrice(IKeplerPair pair) public view returns(uint price0, uint price1) {\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n        if (currentSnapshotId == 0) {\n            (uint reserve0, uint reserve1,) = pair.getReserves();\n            if (reserve0 != 0) {\n                price0 = IERC20(token0).balanceOf(address(pair)).mul(1e18).div(reserve0);\n            }\n            if (reserve1 != 0) {\n                price1 = IERC20(token1).balanceOf(address(pair)).mul(1e18).div(reserve1);\n            }\n        } else {\n            price0 = pairSnapshotPrice[address(pair)][token0];\n            price1 = pairSnapshotPrice[address(pair)][token1];\n        }\n    }\n\n    function getSnapshotBalance(IKeplerPair pair, address user) public view returns (uint) {\n        if (currentSnapshotId == 0 || userSnapshotId[address(pair)][user] != currentSnapshotId) {\n            return pair.balanceOf(user);\n        } else if (userSnapshotId[address(pair)][user] == currentSnapshotId) {\n            return userSnapshotAmount[address(pair)][user];\n        }\n    }\n\n    function getUserSnapshot(address pair, address user) external view returns (uint256, uint256) {\n        uint balance = getSnapshotBalance(IKeplerPair(pair), user);\n        (uint price0, uint price1) = getSnapshotPrice(IKeplerPair(pair));\n        return (balance.mul(price0).div(1e18), balance.mul(price1).div(1e18));\n    }\n\n    function _beforeTokenTransfer(address token0, address token1, address from, address to, uint256 amount) external {\n        if (false) {\n            amount;\n        }\n        address pair = getPair[token0][token1];\n        if (pair == address(0)) {\n            return;\n        }\n        require(msg.sender == pair, \"only pair can do this\");\n        if (currentSnapshotId == 0) {\n            return;\n        }\n        if (userSnapshotId[pair][from] < currentSnapshotId) {\n            userSnapshotAmount[pair][from] = IKeplerPair(pair).balanceOf(from);\n            userSnapshotId[pair][from] = currentSnapshotId;\n        }\n        if (userSnapshotId[pair][to] < currentSnapshotId) {\n            userSnapshotAmount[pair][to] = IKeplerPair(pair).balanceOf(to);\n            userSnapshotId[pair][to] = currentSnapshotId;\n        }\n    }\n}\n"
    },
    "contracts/swap/KeplerPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.16;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '../libraries/UQ112x112.sol';\nimport '../libraries/Math.sol';\nimport '../interfaces/IKeplerFactory.sol';\nimport 'hardhat/console.sol';\n\ncontract KeplerPair is ERC20 {\n    using SafeMath  for uint;\n    using UQ112x112 for uint224;\n\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint public price0CumulativeLast;\n    uint public price1CumulativeLast;\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, 'Baby: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Kepler: TRANSFER_FAILED');\n    }\n\n    constructor() ERC20(\"Kepler Pair\", \"KEPLERPair\") {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, 'Baby: FORBIDDEN'); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Kepler: OVERFLOW');\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        uint _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1));\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, 'Baby: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf(address(this));\n\n        uint _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\n        require(_totalSupply != 0, \"influence balance\");\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'Kepler: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint amount0Out, uint amount1Out, address to) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'Kepler: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Kepler: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        uint[] memory fees;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'Kepler: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        address[] memory tokens = new address[](2); tokens[0] = _token0; tokens[1] = _token1;\n        fees = IKeplerFactory(factory).getTransferFee(tokens);\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Baby: INSUFFICIENT_INPUT_AMOUNT');\n        {\n        /*\n        address feeTo = IKeplerFactory(factory).feeTo();\n        if (fees[0] > 0 && amount0In > 0) {\n            uint fee = amount0In.mul(fees[0]).div(1000);\n            if (fee > 0 && feeTo != address(0)) {\n                _safeTransfer(token0, IKeplerFactory(factory).feeTo(), fee);\n            }\n            balance0 = balance0.sub(fee);\n        }\n        if (fees[1] > 0 && amount1In > 0) {\n            uint fee = amount1In.mul(fees[1]).div(1000);\n            if (fee > 0 && feeTo != address(0)) {\n                _safeTransfer(token1, IKeplerFactory(factory).feeTo(), fee);\n            }\n            balance1 = balance1.sub(fee);\n        }\n        */\n        require(balance0.mul(balance1) >= uint(_reserve0).mul(_reserve1), 'Kepler: K');\n        }\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override { \n        IKeplerFactory(factory)._beforeTokenTransfer(token0, token1, from, to, amount);\n    }\n}\n"
    },
    "contracts/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.16;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/farm/MasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '../interfaces/IKeplerPair.sol';\nimport '../interfaces/IKeplerRouter.sol';\nimport '../interfaces/IUser.sol';\nimport '../interfaces/IWETH.sol';\nimport '../libraries/KeplerLibrary.sol';\nimport 'hardhat/console.sol';\n\ncontract MasterChef is Ownable {\n    using SafeMath for uint256;\n\n    IUser user;\n    address public immutable WETH;\n\n    uint256 public currentSnapshotId;\n    mapping(IKeplerPair => mapping(address => uint256)) userSnapshotId;\n    mapping(IKeplerPair => mapping(address => uint256)) userSnapshotAmount;\n    address snapshotCreateCaller;\n\n    struct UserLockInfo {\n        uint256 amount;     \n        uint256 shares;\n        uint256 lockType;\n        uint256 expireAt;\n    }\n\n    struct UserInfo {\n        uint256 amount;     \n        uint256 shares;\n        uint256 token0Debt;\n        uint256 token1Debt;\n        uint256 token0Pending;\n        uint256 token1Pending;\n    }\n\n    struct PoolInfo {\n        uint256 totalShares;\n        uint256 token0AccPerShare;\n        uint256 token1AccPerShare;\n        bool avaliable;\n    }\n\n    mapping(IKeplerPair => PoolInfo) poolInfo;\n    mapping(IKeplerPair => mapping(address => UserInfo)) public userInfo;\n    mapping(IKeplerPair => mapping(address => UserLockInfo[])) public userLockInfo;\n    mapping(IKeplerPair => mapping(address => mapping(uint256 => uint256))) public userLockTypeAmount;\n\n    mapping(IKeplerPair => PoolInfo) inviterPoolInfo;\n    mapping(IKeplerPair => mapping(address => UserInfo)) public inviterUserInfo;\n\n    uint256 constant RATIO = 1e18;\n\n    event Deposit(address indexed user, address indexed pair, uint256 amount, uint256 lockType);\n    event Withdraw(address indexed user, uint256 lockID, uint256 amount, uint256 shares, uint256 lockType);\n\n    constructor(IUser _user, address _weth) {\n        user = _user;\n        WETH = _weth;\n    }\n\n    function userLockNum(IKeplerPair _pair, address _user) external view returns (uint256) {\n        return userLockInfo[_pair][_user].length;\n    }\n\n    function setSnapshotCreateCaller(address _snapshotCreateCaller) external onlyOwner {\n        snapshotCreateCaller = _snapshotCreateCaller;\n    }\n\n    function addDefaultPool(IKeplerPair pair) internal {\n        if (poolInfo[pair].avaliable == true) {\n            return;\n        }\n        PoolInfo storage _poolInfo = poolInfo[pair];\n        _poolInfo.avaliable = true;\n        if (inviterPoolInfo[pair].avaliable == true) {\n            return;\n        }\n        PoolInfo storage _inviterPoolInfo = inviterPoolInfo[pair];\n        _inviterPoolInfo.avaliable = true;\n    }\n\n    function doMiner(IKeplerPair pair, IERC20 token, uint256 amount) public {\n        addDefaultPool(pair);\n        address _token0 = pair.token0();\n        address _token1 = pair.token1();\n        require(address(token) == _token0 || address(token) == _token1, \"illegal token\");\n        bool isToken0 = address(token) == _token0;\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\n        PoolInfo memory _poolInfo = poolInfo[pair];\n        if (_poolInfo.totalShares == 0) {\n            return;\n        }\n        if (isToken0) {\n            poolInfo[pair].token0AccPerShare = _poolInfo.token0AccPerShare.add(amount.mul(RATIO).div(_poolInfo.totalShares));\n        } else {\n            poolInfo[pair].token1AccPerShare = _poolInfo.token1AccPerShare.add(amount.mul(RATIO).div(_poolInfo.totalShares));\n        }\n    }\n\n    function doInviteMiner(IKeplerPair pair, IERC20 token, uint256 amount) public {\n        addDefaultPool(pair);\n        address _token0 = pair.token0();\n        address _token1 = pair.token1();\n        require(address(token) == _token0 || address(token) == _token1, \"illegal token\");\n        bool isToken0 = address(token) == _token0;\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\n        PoolInfo memory _poolInfo = inviterPoolInfo[pair];\n        if (_poolInfo.totalShares == 0) {\n            return;\n        }\n        if (isToken0) {\n            inviterPoolInfo[pair].token0AccPerShare = _poolInfo.token0AccPerShare.add(amount.mul(RATIO).div(_poolInfo.totalShares));\n        } else {\n            inviterPoolInfo[pair].token1AccPerShare = _poolInfo.token1AccPerShare.add(amount.mul(RATIO).div(_poolInfo.totalShares));\n        }\n    }\n\n    function userClear(IKeplerPair _pair, address _user, PoolInfo memory _poolInfo, UserInfo memory _userInfo) internal {\n        if (_userInfo.shares > 0) {\n            uint256 token0Debt = _userInfo.shares.mul(_poolInfo.token0AccPerShare).div(RATIO);\n            userInfo[_pair][_user].token0Pending = _userInfo.token0Pending.add(token0Debt.sub(_userInfo.token0Debt));\n            userInfo[_pair][_user].token0Debt = token0Debt;\n\n            uint256 token1Debt = _userInfo.shares.mul(_poolInfo.token0AccPerShare).div(RATIO);\n            userInfo[_pair][_user].token1Pending = _userInfo.token1Pending.add(token1Debt.sub(_userInfo.token1Debt));\n            userInfo[_pair][_user].token1Debt = token1Debt;\n        }\n    }\n\n    function userClear(IKeplerPair _pair, address _user) internal {\n        if (userInfo[_pair][_user].shares > 0) {\n            uint256 token0Debt = userInfo[_pair][_user].shares.mul(poolInfo[_pair].token0AccPerShare).div(RATIO);\n            userInfo[_pair][_user].token0Pending = userInfo[_pair][_user].token0Pending.add(token0Debt.sub(userInfo[_pair][_user].token0Debt));\n            userInfo[_pair][_user].token0Debt = token0Debt;\n\n            uint256 token1Debt = userInfo[_pair][_user].shares.mul(poolInfo[_pair].token0AccPerShare).div(RATIO);\n            userInfo[_pair][_user].token1Pending = userInfo[_pair][_user].token1Pending.add(token1Debt.sub(userInfo[_pair][_user].token1Debt));\n            userInfo[_pair][_user].token1Debt = token1Debt;\n        }\n    }\n\n    function inviterClear(IKeplerPair _pair, address _user, PoolInfo memory _poolInfo, UserInfo memory _userInfo) internal {\n        if (_userInfo.shares > 0) {\n            uint userShares = userInfo[_pair][_user].shares;\n\n            uint256 token0Debt = _userInfo.shares.mul(_poolInfo.token0AccPerShare).div(RATIO);\n            if (userShares > 0) {\n                inviterUserInfo[_pair][_user].token0Pending = _userInfo.token0Pending.add(token0Debt.sub(_userInfo.token0Debt));\n            }\n            inviterUserInfo[_pair][_user].token0Debt = token0Debt;\n\n            uint256 token1Debt = _userInfo.shares.mul(_poolInfo.token0AccPerShare).div(RATIO);\n            if (userShares > 0) {\n                inviterUserInfo[_pair][_user].token1Pending = _userInfo.token1Pending.add(token1Debt.sub(_userInfo.token1Debt));\n            }\n            inviterUserInfo[_pair][_user].token1Debt = token1Debt;\n        }\n    }\n\n    function inviterClear(IKeplerPair _pair, address _user) internal {\n        if (inviterUserInfo[_pair][_user].shares > 0) {\n            uint256 token0Debt = inviterUserInfo[_pair][_user].shares.mul(inviterPoolInfo[_pair].token0AccPerShare).div(RATIO);\n            inviterUserInfo[_pair][_user].token0Pending = inviterUserInfo[_pair][_user].token0Pending.add(token0Debt.sub(inviterUserInfo[_pair][_user].token0Debt));\n            inviterUserInfo[_pair][_user].token0Debt = token0Debt;\n\n            uint256 token1Debt = inviterUserInfo[_pair][_user].shares.mul(inviterPoolInfo[_pair].token0AccPerShare).div(RATIO);\n            inviterUserInfo[_pair][_user].token1Pending = inviterUserInfo[_pair][_user].token1Pending.add(token1Debt.sub(inviterUserInfo[_pair][_user].token1Debt));\n            inviterUserInfo[_pair][_user].token1Debt = token1Debt;\n        }\n    }\n\n    function getType(uint lockType) public pure returns (uint256, uint256) {\n        if (lockType == 0) {\n            return (3, 0); \n        } else if (lockType == 1) {\n            return (10, 30 * 24 * 60 * 60);\n        } else if (lockType == 2) {\n            return (15, 90 * 24 * 60 * 60);\n        } else if (lockType == 3) {\n            return (30, 360* 24 * 60 * 60);\n        } else {\n            require (false, \"illegal lockType\");\n        }\n    }\n\n    function inviteDeposit(address _user, IKeplerPair _pair, uint256 _amount, uint256 _shares) internal {\n        address _inviter = user.inviter(_user);\n        require(_inviter != address(0), \"user not registe\");\n        PoolInfo memory _poolInfo = inviterPoolInfo[_pair];\n        UserInfo memory _userInfo = inviterUserInfo[_pair][_inviter];\n        inviterClear(_pair, _user, _poolInfo, _userInfo);\n        if (_shares > 0) {\n            if (userInfo[_pair][_inviter].shares > 0) {\n                inviterPoolInfo[_pair].totalShares = _poolInfo.totalShares.add(_shares); \n            }\n            inviterUserInfo[_pair][_inviter].shares = _userInfo.amount.add(_shares);\n            inviterUserInfo[_pair][_inviter].amount = _userInfo.amount.add(_amount);\n            inviterUserInfo[_pair][_inviter].token0Debt = _userInfo.shares.add(_shares).mul(_poolInfo.token0AccPerShare).div(RATIO);\n            inviterUserInfo[_pair][_inviter].token1Debt = _userInfo.shares.add(_shares).mul(_poolInfo.token1AccPerShare).div(RATIO);\n        }\n    }\n\n    function deposit(IKeplerPair _pair, uint256 _amount, uint256 _lockType) external {\n        depositFor(_pair, _amount, _lockType, msg.sender);\n    }\n\n    function depositFor(IKeplerPair _pair, uint256 _amount, uint256 _lockType, address to) public {\n        addDefaultPool(_pair);\n        (uint ratio, uint lockTime) = getType(_lockType);\n        PoolInfo memory _poolInfo = poolInfo[_pair];\n        UserInfo memory _userInfo = userInfo[_pair][to];\n        userClear(_pair, to, _poolInfo, _userInfo);\n        uint shares = _amount.mul(ratio);\n        if (_amount > 0) {\n            SafeERC20.safeTransferFrom(IERC20(address(_pair)), to, address(this), _amount);\n            userLockInfo[_pair][to].push(UserLockInfo({\n                amount: _amount,\n                shares: shares,\n                lockType: _lockType,\n                expireAt: block.timestamp + lockTime\n            }));\n            if (_userInfo.shares == 0) {\n                inviterClear(_pair, to);\n                inviterPoolInfo[_pair].totalShares = inviterPoolInfo[_pair].totalShares.add(inviterUserInfo[_pair][to].shares);\n            }\n            poolInfo[_pair].totalShares = _poolInfo.totalShares.add(shares);\n            userInfo[_pair][to].shares = _userInfo.shares.add(shares);\n            userInfo[_pair][to].amount = _userInfo.amount.add(_amount);\n            userInfo[_pair][to].token0Debt = _userInfo.shares.add(shares).mul(_poolInfo.token0AccPerShare).div(RATIO);\n            userInfo[_pair][to].token1Debt = _userInfo.shares.add(shares).mul(_poolInfo.token1AccPerShare).div(RATIO);\n            userLockTypeAmount[_pair][to][_lockType] = userLockTypeAmount[_pair][to][_lockType].add(_amount);\n        }\n        inviteDeposit(to, _pair, _amount, shares);\n        emit Deposit(to, address(_pair), _amount, _lockType);\n    }\n\n    function inviteWithdraw(address _user, IKeplerPair _pair, uint256 _amount, uint256 _shares) internal {\n        address _inviter = user.inviter(_user);\n        require(_inviter != address(0), \"user not registe\");\n        PoolInfo memory _poolInfo = inviterPoolInfo[_pair];\n        UserInfo memory _userInfo = inviterUserInfo[_pair][_inviter];\n        inviterClear(_pair, msg.sender, _poolInfo, _userInfo);\n        if (_shares > 0) {\n            if (userInfo[_pair][_inviter].shares > 0) {\n                inviterPoolInfo[_pair].totalShares = _poolInfo.totalShares.sub(_shares); \n            }\n            inviterUserInfo[_pair][_inviter].shares = _userInfo.amount.sub(_shares);\n            inviterUserInfo[_pair][_inviter].amount = _userInfo.amount.sub(_amount);\n        }\n        inviterUserInfo[_pair][_inviter].token0Debt = _userInfo.shares.sub(_shares).mul(_poolInfo.token0AccPerShare).div(RATIO);\n        inviterUserInfo[_pair][_inviter].token1Debt = _userInfo.shares.sub(_shares).mul(_poolInfo.token1AccPerShare).div(RATIO);\n    }\n\n    function withdraw(IKeplerPair _pair, uint256 _lockId) external {\n        uint userLockInfoNum = userLockInfo[_pair][msg.sender].length;\n        require(_lockId < userLockInfoNum, \"illegal lockID\");\n        UserLockInfo memory _userLockInfo = userLockInfo[_pair][msg.sender][_lockId];\n        require (block.timestamp >= _userLockInfo.expireAt, \"not the right time\");\n        PoolInfo memory _poolInfo = poolInfo[_pair];\n        UserInfo memory _userInfo = userInfo[_pair][msg.sender];\n        userClear(_pair, msg.sender, _poolInfo, _userInfo);\n        poolInfo[_pair].totalShares = _poolInfo.totalShares.sub(_userLockInfo.shares); \n        userInfo[_pair][msg.sender].shares = _userInfo.shares.sub(_userLockInfo.shares);\n        userInfo[_pair][msg.sender].amount = _userInfo.amount.sub(_userLockInfo.amount);\n        userLockTypeAmount[_pair][msg.sender][_userLockInfo.lockType] = userLockTypeAmount[_pair][msg.sender][_userLockInfo.lockType].sub(_userLockInfo.amount);\n        if (_userInfo.shares == _userLockInfo.shares) {\n            inviterClear(_pair, msg.sender);\n            inviterPoolInfo[_pair].totalShares = inviterPoolInfo[_pair].totalShares.sub(inviterUserInfo[_pair][msg.sender].shares);\n        }\n        if (_userLockInfo.amount > 0) {\n            address token0 = _pair.token0();\n            address token1 = _pair.token1();\n            _pair.transfer(address(_pair), _userLockInfo.amount); // send liquidity to pair\n            if (token0 == WETH) {\n                (uint amount0, uint amount1) = _pair.burn(address(this));\n                SafeERC20.safeTransfer(IERC20(token1), msg.sender, amount1);\n                IWETH(WETH).withdraw(amount0);\n                (bool success,) = msg.sender.call{value:amount0}(new bytes(0));\n                require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n            } else if (token1 == WETH) {\n                (uint amount0, uint amount1) = _pair.burn(address(this));\n                SafeERC20.safeTransfer(IERC20(token0), msg.sender, amount0);\n                IWETH(WETH).withdraw(amount1);\n                (bool success,) = msg.sender.call{value:amount1}(new bytes(0));\n                require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n            } else {\n                _pair.burn(msg.sender);\n            }\n        }\n        uint256 _amount = _userLockInfo.amount;\n        uint256 _shares = _userLockInfo.shares;\n        if (_lockId != userLockInfoNum - 1) {\n            UserLockInfo memory lastUserLockInfo = userLockInfo[_pair][msg.sender][userLockInfoNum - 1];\n            userLockInfo[_pair][msg.sender][_lockId].amount = lastUserLockInfo.amount;\n            userLockInfo[_pair][msg.sender][_lockId].shares = lastUserLockInfo.shares;\n            userLockInfo[_pair][msg.sender][_lockId].lockType = lastUserLockInfo.lockType;\n            userLockInfo[_pair][msg.sender][_lockId].expireAt = lastUserLockInfo.expireAt;\n        }\n        userLockInfo[_pair][msg.sender].pop();\n        userInfo[_pair][msg.sender].token0Debt = _userInfo.shares.sub(_shares).mul(_poolInfo.token0AccPerShare).div(RATIO);\n        userInfo[_pair][msg.sender].token1Debt = _userInfo.shares.sub(_shares).mul(_poolInfo.token1AccPerShare).div(RATIO);\n        inviteWithdraw(msg.sender, _pair, _amount, _shares);\n        emit Withdraw(msg.sender, _lockId, _userLockInfo.amount, _userLockInfo.shares, _userLockInfo.lockType);\n    }\n\n    function createSnapshot(uint256 id) external {\n        require(msg.sender == snapshotCreateCaller, \"only snapshotCreateCaller can do this\");\n        currentSnapshotId = id; \n    }\n\n    function getUserSnapshot(address pair, address _user) external view returns (uint256) {\n        if (currentSnapshotId == 0) {\n            return userInfo[IKeplerPair(pair)][_user].amount;\n        } else if (userSnapshotId[IKeplerPair(pair)][_user] == currentSnapshotId) {\n            return userSnapshotAmount[IKeplerPair(pair)][_user];\n        } else {\n            return userInfo[IKeplerPair(pair)][_user].amount;\n        }\n    }\n\n    function _beforeDepositOrWithdraw(IKeplerPair pair, address _user, uint256 amount) internal {\n        if (false) {\n            amount;\n        }\n        if (currentSnapshotId == 0) {\n            return;\n        }\n        if (userSnapshotId[pair][_user] < currentSnapshotId) {\n            userSnapshotAmount[pair][_user] = userInfo[pair][_user].amount;\n            userSnapshotId[pair][_user] = currentSnapshotId;\n        }\n    }\n\n    function getUserAmount(IKeplerPair pair, address _user, uint lockType) external view returns (uint) {\n        return userLockTypeAmount[pair][_user][lockType];\n    }\n\n    function getInviterAmount(IKeplerPair pair, address inviter) external view returns (uint) {\n        return inviterUserInfo[pair][inviter].amount;\n    }\n\n    function getPoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare) {\n        PoolInfo memory _poolInfo = poolInfo[_pair];\n        totalShares = _poolInfo.totalShares;\n        token0AccPerShare = _poolInfo.token0AccPerShare;\n        token1AccPerShare = _poolInfo.token1AccPerShare;\n    }\n\n    function getUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending) {\n        UserInfo memory _userInfo = userInfo[_pair][_user];\n        amount = _userInfo.amount;\n        shares = _userInfo.shares;\n        token0Debt = _userInfo.token0Debt;\n        token1Debt = _userInfo.token1Debt;\n        token0Pending = _userInfo.token0Pending;\n        token1Pending = _userInfo.token1Pending;\n    }\n\n    function getInvitePoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare) {\n        PoolInfo memory _poolInfo = inviterPoolInfo[_pair];\n        totalShares = _poolInfo.totalShares;\n        token0AccPerShare = _poolInfo.token0AccPerShare;\n        token1AccPerShare = _poolInfo.token1AccPerShare;\n    }\n\n    function getInviteUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending) {\n        UserInfo memory _userInfo = inviterUserInfo[_pair][_user];\n        amount = _userInfo.amount;\n        shares = _userInfo.shares;\n        token0Debt = _userInfo.token0Debt;\n        token1Debt = _userInfo.token1Debt;\n        token0Pending = _userInfo.token0Pending;\n        token1Pending = _userInfo.token1Pending;\n    }\n\n    function claimMine(IKeplerPair _pair, address _token) external {\n        address token0 = _pair.token0();\n        address token1 = _pair.token1();\n        uint amount = 0;\n        if (_token == token0) {\n            uint acc = poolInfo[_pair].token0AccPerShare;\n            uint shares = userInfo[_pair][msg.sender].shares;\n            uint debt = userInfo[_pair][msg.sender].token0Debt;\n            uint pending = userInfo[_pair][msg.sender].token0Pending;\n            amount = acc.mul(shares).div(1e18).sub(debt).add(pending);\n            userInfo[_pair][msg.sender].token0Debt = acc.mul(shares).div(1e18);\n            userInfo[_pair][msg.sender].token0Pending = 0;\n        } else if (_token == token1) {\n            uint acc = poolInfo[_pair].token1AccPerShare;\n            uint shares = userInfo[_pair][msg.sender].shares;\n            uint debt = userInfo[_pair][msg.sender].token1Debt;\n            uint pending = userInfo[_pair][msg.sender].token1Pending;\n            amount = acc.mul(shares).div(1e18).sub(debt).add(pending);\n            userInfo[_pair][msg.sender].token1Debt = acc.mul(shares).div(1e18);\n            userInfo[_pair][msg.sender].token1Pending = 0;\n        } else {\n            require(false, \"illegal token\");\n        }\n        SafeERC20.safeTransfer(IERC20(_token), msg.sender, amount);\n    }\n\n    function claimInviteMine(IKeplerPair _pair, address _token) external {\n        address token0 = _pair.token0();\n        address token1 = _pair.token1();\n        uint amount = userInfo[_pair][msg.sender].amount;\n        if (amount == 0) {\n            return;\n        }\n        if (_token == token0) {\n            uint acc = inviterPoolInfo[_pair].token0AccPerShare;\n            uint shares = inviterUserInfo[_pair][msg.sender].shares;\n            uint debt = inviterUserInfo[_pair][msg.sender].token0Debt;\n            uint pending = inviterUserInfo[_pair][msg.sender].token0Pending;\n            amount = acc.mul(shares).div(1e18).sub(debt).add(pending);\n            inviterUserInfo[_pair][msg.sender].token0Debt = acc.mul(shares).div(1e18);\n            inviterUserInfo[_pair][msg.sender].token0Pending = 0;\n        } else if (_token == token1) {\n            uint acc = inviterPoolInfo[_pair].token1AccPerShare;\n            uint shares = inviterUserInfo[_pair][msg.sender].shares;\n            uint debt = inviterUserInfo[_pair][msg.sender].token1Debt;\n            uint pending = inviterUserInfo[_pair][msg.sender].token1Pending;\n            amount = acc.mul(shares).div(1e18).sub(debt).add(pending);\n            inviterUserInfo[_pair][msg.sender].token1Debt = acc.mul(shares).div(1e18);\n            inviterUserInfo[_pair][msg.sender].token1Pending = 0;\n        } else {\n            require(false, \"illegal token\");\n        }\n        SafeERC20.safeTransfer(IERC20(_token), msg.sender, amount);\n    }\n}\n"
    },
    "contracts/farm/LuckyPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '../interfaces/IKeplerPair.sol';\nimport '../interfaces/IUser.sol';\nimport 'hardhat/console.sol';\n\ncontract LuckyPool is Ownable {\n    using SafeMath for uint256;\n\n    uint256 constant public TOTAL_WINER_NUM = 11;\n    uint256 constant public WINER_NUM = 10;\n    uint256 constant public BEST_WINER_NUM = 1;\n\n    IUser user;\n    IERC20[] rewardToken;\n    bytes32 data;\n\n    struct PoolInfo {\n        uint256 beginAt;\n        uint256 openAt;\n        uint256 countAt;\n        uint256 finishAt;\n        uint256 userNum;\n        uint256 claimNum;\n        uint256 winers;\n        address bestUser;\n    }\n\n    PoolInfo[] public poolInfo;\n    uint256 public currentLuckyId;\n    mapping(uint256 => IERC20[]) poolRewardToken;\n    mapping(uint256 => mapping(IERC20 => uint256)) poolRewardAmount;\n\n    mapping(address => uint256) luckyUser;\n    mapping(uint256 => mapping(address => uint8)) winers;\n\n    constructor(IUser _user) {\n        user = _user;\n    }\n\n    modifier onlyOwnerOrSelf() {\n        require(msg.sender == owner() || msg.sender == address(this), \"only owner or self can do this\");\n        _;\n    }\n\n    function addRewardToken(IERC20 _rewardToken) public onlyOwnerOrSelf {\n        rewardToken.push(_rewardToken);\n    }\n\n    function delRewardToken(uint256 _id) public onlyOwnerOrSelf {\n        require(_id < rewardToken.length, \"illegal id\");\n        if (_id != rewardToken.length - 1) {\n            rewardToken[_id] = rewardToken[rewardToken.length - 1];\n        }\n        rewardToken.pop();\n    }\n\n    function nextLuckyId() public view returns (uint256) {\n        return currentLuckyId.add(1);\n    }\n\n    function setNextLuckyId() internal {\n        currentLuckyId = currentLuckyId.add(1);\n    }\n\n    function beginLuckyPool(uint256 timestamp) public onlyOwnerOrSelf {\n        require(timestamp >= block.timestamp, \"illegal timestamp\");\n        if (poolInfo.length > 0) {\n            PoolInfo memory _lastPoolInfo = poolInfo[poolInfo.length - 1];\n            require(_lastPoolInfo.countAt != 0 && _lastPoolInfo.countAt <= timestamp, \"last luckyPool not finish\");\n        }\n        uint256 luckyId = currentLuckyId; \n        setNextLuckyId();\n        PoolInfo storage _poolInfo = poolInfo[luckyId];\n        _poolInfo.beginAt = timestamp;\n    }\n\n    function openLuckyPool() public onlyOwnerOrSelf {\n        uint _currentLuckyId = currentLuckyId.sub(1);\n        PoolInfo memory _currentPoolInfo = poolInfo[_currentLuckyId];\n        require(block.timestamp > _currentPoolInfo.beginAt && _currentPoolInfo.openAt == 0, \"not the right time\");\n        poolInfo[_currentLuckyId].openAt = block.timestamp;\n        poolInfo[_currentLuckyId].countAt = block.timestamp + 2 * 24 * 3600;\n        poolInfo[_currentLuckyId].finishAt = block.timestamp + 5 * 24 * 3600;\n        IERC20[] memory _rewardToken = rewardToken;\n        for (uint i = 0; i < _rewardToken.length; i ++) {\n            poolRewardToken[_currentLuckyId].push(_rewardToken[i]);\n            poolRewardAmount[_currentLuckyId][_rewardToken[i]] = rewardToken[i].balanceOf(address(this));\n        }\n        beginLuckyPool(block.timestamp + 5 * 24 * 3600);\n    }\n\n    function countUser(address[] memory _users) public onlyOwnerOrSelf {\n        uint256 _currentLuckyId = currentLuckyId.sub(2);\n        PoolInfo memory _poolInfo = poolInfo[_currentLuckyId];\n        require(_poolInfo.openAt != 0 && block.timestamp >= _poolInfo.openAt && block.timestamp <= _poolInfo.finishAt, \"not the right time\");\n        for (uint i = 0; i < _users.length; i ++) {\n            luckyUser[_users[i]] = _currentLuckyId;\n        }\n        poolInfo[_currentLuckyId].userNum = _poolInfo.userNum.add(_users.length);\n    }\n\n    function win(string memory r) internal returns (bool) {\n        bytes32 data1 = keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender, block.coinbase, block.number)); \n        bytes32 data2 = keccak256(abi.encodePacked(msg.data, gasleft(), tx.gasprice));\n        uint8 num = uint8(uint256(keccak256(abi.encodePacked(data, data1, data2, r)))%10);\n        data = keccak256(abi.encodePacked(data1, data2));\n        return (num == 1);\n    }\n\n    function doReward(uint _poolId, uint8 _type, address to) internal {\n        IERC20[] memory _rewardToken = poolRewardToken[_poolId];\n        if (_type == 2) {\n            for (uint i = 0; i < _rewardToken.length; i ++) {\n                uint256 _rewardAmount = poolRewardAmount[_poolId][_rewardToken[i]];\n                if (_rewardAmount > 0) {\n                    SafeERC20.safeTransfer(_rewardToken[i], to, _rewardAmount.div(2).div(WINER_NUM));\n                }\n            }\n        } else if (_type == 3) {\n            for (uint i = 0; i < _rewardToken.length; i ++) {\n                uint256 _rewardAmount = poolRewardAmount[_poolId][_rewardToken[i]];\n                if (_rewardAmount > 0) {\n                    SafeERC20.safeTransfer(_rewardToken[i], to, _rewardAmount.div(2));\n                }\n                poolInfo[_poolId].bestUser = to;\n            }\n        }\n        poolInfo[_poolId].winers = poolInfo[_poolId].winers.add(1);\n    }\n\n    function claim(string memory r) external {\n        uint256 _currentLuckyId = currentLuckyId.sub(2);\n        PoolInfo memory _poolInfo = poolInfo[_currentLuckyId];\n        require(block.timestamp >= _poolInfo.countAt && block.timestamp <= _poolInfo.finishAt, \"not the right time\");\n        require(luckyUser[msg.sender] == _currentLuckyId, \"do not have the ops\");\n        require(winers[_currentLuckyId][msg.sender] == 0, \"already do this\");\n        poolInfo[_currentLuckyId].claimNum = _poolInfo.claimNum.add(1);\n        bool _win = true;\n        if (_poolInfo.userNum.sub(_poolInfo.claimNum) > TOTAL_WINER_NUM.sub(_poolInfo.winers)) {\n            _win = win(r);\n        }\n        if (!_win) {\n            winers[_currentLuckyId][msg.sender] = 1;\n            return;\n        }\n        if (_poolInfo.winers < 4 || _poolInfo.bestUser != address(0)) {\n            winers[_currentLuckyId][msg.sender] = 2;\n            doReward(_currentLuckyId, 2, msg.sender);\n        } else {\n            winers[_currentLuckyId][msg.sender] = 3;\n            doReward(_currentLuckyId, 3, msg.sender);\n        }\n    }\n\n}\n"
    },
    "contracts/farm/Inviter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '../interfaces/IUser.sol';\n\ncontract Inviter {\n    using SafeMath for uint256;\n\n    IUser user;\n    mapping(address => mapping(address => uint256)) public profits;\n\n    constructor(IUser _user) {\n        user = _user;\n    }\n\n    function doHardWork(address _user, address _token, uint256 _amount) external {\n        SafeERC20.safeTransferFrom(IERC20(_token), msg.sender, address(this), _amount);\n        address _inviter = user.inviter(_user);\n        profits[_inviter][_token] = profits[_user][_token].add(_amount);\n    }\n\n    function claim(address _token) external {\n        SafeERC20.safeTransfer(IERC20(_token), msg.sender, profits[msg.sender][_token]); \n        profits[msg.sender][_token] = 0;\n    }\n\n}\n"
    },
    "contracts/farm/FeeDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '../interfaces/IKeplerPair.sol';\nimport '../interfaces/IMasterChef.sol';\nimport '../interfaces/IInviter.sol';\nimport '../interfaces/IUser.sol';\nimport 'hardhat/console.sol';\n\ncontract FeeDispatcher is Ownable {\n    using SafeMath for uint256;\n\n    uint256 constant TOTAL_PERCENT = 10000;\n\n    enum FarmType {\n        Account,\n        Miner,\n        InviteMiner,\n        Crycle,\n        Lucky,\n        Inviter\n    }\n\n    struct Destination {\n        address destination;\n        uint256 percent;\n        bool avaliable;\n        FarmType farmType;\n    }\n\n    Destination[] public defaultDestination;\n\n    function defaultDestinationLength() external view returns (uint256) {\n        return defaultDestination.length;\n    }\n\n    function checkDefaultDestination() internal view {\n        uint totalPercent = 0;\n        for (uint i = 0; i < defaultDestination.length; i ++) {\n            totalPercent = totalPercent.add(defaultDestination[i].percent);\n        }\n        require(totalPercent >= 0 && totalPercent <= TOTAL_PERCENT, \"illegal totalPercent\");\n    }\n\n    function addDefaultDestination(address _destination, uint256 _percent, uint256 _farmType) external onlyOwner {\n        defaultDestination.push(Destination({\n            destination: _destination,\n            percent: _percent,\n            avaliable: true,\n            farmType: FarmType(_farmType)\n        }));\n        checkDefaultDestination();\n    }\n\n    function delDefaultDestination(uint id) external onlyOwner {\n        require(id >= 0 && id < defaultDestination.length, \"illegal id\");\n        if (id < defaultDestination.length - 1) {\n            Destination memory lastDestination = defaultDestination[defaultDestination.length - 1];\n            Destination storage toDeleteDestination = defaultDestination[id];\n            toDeleteDestination.destination = lastDestination.destination;\n            toDeleteDestination.percent = lastDestination.percent;\n            toDeleteDestination.avaliable = lastDestination.avaliable;\n            toDeleteDestination.farmType = lastDestination.farmType;\n        }\n        defaultDestination.pop();\n    }\n\n    mapping(address => Destination[]) tokenDestination;\n\n    function tokenDestinationLength(address token) external view returns (uint256) {\n        return tokenDestination[token].length;\n    }\n\n    function checkTokenDestination(address token) internal view {\n        uint totalPercent = 0;\n        Destination[] storage _tokenDestination = tokenDestination[token];\n        for (uint i = 0; i < _tokenDestination.length; i ++) {\n            totalPercent = totalPercent.add(_tokenDestination[i].percent);\n        }\n        require(totalPercent >= 0 && totalPercent <= TOTAL_PERCENT, \"illegal totalPercent\");\n    }\n\n    function addTokenDestination(address _token, address _destination, uint256 _percent, uint256 _farmType) external onlyOwner {\n        tokenDestination[_token].push(Destination({\n            destination: _destination,\n            percent: _percent,\n            avaliable: true,\n            farmType: FarmType(_farmType)\n        }));\n        checkTokenDestination(_token);\n    }\n\n    function delTokenDestination(address token, uint id) external onlyOwner {\n        require(id >= 0 && id < tokenDestination[token].length, \"illegal id\");\n        if (id < tokenDestination[token].length - 1) {\n            Destination memory lastDestination = tokenDestination[token][tokenDestination[token].length - 1];\n            Destination storage toDeleteDestination = tokenDestination[token][id];\n            toDeleteDestination.destination = lastDestination.destination;\n            toDeleteDestination.percent = lastDestination.percent;\n            toDeleteDestination.avaliable = lastDestination.avaliable;\n            toDeleteDestination.farmType = lastDestination.farmType;\n        }\n        tokenDestination[token].pop();\n    }\n\n    mapping(address => Destination[]) relateDestination;\n\n    function relateDestinationLength(address token) external view returns (uint256) {\n        return relateDestination[token].length;\n    }\n\n    function checkRelateDestination(address token) internal view {\n        uint totalPercent = 0;\n        Destination[] storage _tokenDestination = relateDestination[token];\n        for (uint i = 0; i < _tokenDestination.length; i ++) {\n            totalPercent = totalPercent.add(_tokenDestination[i].percent);\n        }\n        require(totalPercent >= 0 && totalPercent <= TOTAL_PERCENT, \"illegal totalPercent\");\n    }\n\n    function addRelateDestination(address _token, address _destination, uint256 _percent, uint256 _farmType) external onlyOwner {\n        relateDestination[_token].push(Destination({\n            destination: _destination,\n            percent: _percent,\n            avaliable: true,\n            farmType: FarmType(_farmType)\n        }));\n        checkRelateDestination(_token);\n    }\n\n    function delRelateDestination(address token, uint id) external onlyOwner {\n        require(id >= 0 && id < relateDestination[token].length, \"illegal id\");\n        if (id < relateDestination[token].length - 1) {\n            Destination memory lastDestination = relateDestination[token][relateDestination[token].length - 1];\n            Destination storage toDeleteDestination = relateDestination[token][id];\n            toDeleteDestination.destination = lastDestination.destination;\n            toDeleteDestination.percent = lastDestination.percent;\n            toDeleteDestination.avaliable = lastDestination.avaliable;\n            toDeleteDestination.farmType = lastDestination.farmType;\n        }\n        relateDestination[token].pop();\n    }\n\n    function doHardWork(address pair, address token, address user, uint256 amount) public {\n        SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount);\n        Destination[] memory destinations;\n        if (tokenDestination[token].length > 0) {\n            destinations = tokenDestination[token];\n        } else if (pair != address(0)) {\n            address relateToken = token == IKeplerPair(pair).token0() ? IKeplerPair(pair).token1() : IKeplerPair(pair).token0();\n            if (relateDestination[relateToken].length > 0) {\n                destinations = relateDestination[relateToken];\n            } else {\n                destinations = defaultDestination;\n            }\n        } else {\n            destinations = defaultDestination;\n        }\n        for (uint i = 0; i < destinations.length; i ++) {\n            uint farmAmount = amount.mul(destinations[i].percent).div(TOTAL_PERCENT);\n            if (destinations[i].farmType == FarmType.Account) {\n                SafeERC20.safeTransfer(IERC20(token), destinations[i].destination, farmAmount);\n            } else if (destinations[i].farmType == FarmType.Miner) {\n                IERC20(token).approve(destinations[i].destination, farmAmount);\n                IMasterChef(destinations[i].destination).doMiner(IKeplerPair(pair), IERC20(token), farmAmount);\n            } else if (destinations[i].farmType == FarmType.InviteMiner) {\n                IERC20(token).approve(destinations[i].destination, farmAmount);\n                IMasterChef(destinations[i].destination).doInviteMiner(IKeplerPair(pair), IERC20(token), farmAmount);\n            } else if (destinations[i].farmType == FarmType.Inviter) {\n                IERC20(token).approve(destinations[i].destination, farmAmount);\n                IInviter(destinations[i].destination).doHardWork(user, token, farmAmount);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}