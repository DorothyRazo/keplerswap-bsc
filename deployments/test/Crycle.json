{
  "address": "0x556eD33ea22476Ea9B8f39bC2e6a5972Dd28bac8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUser",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IMasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_busd",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_sds",
          "type": "address"
        },
        {
          "internalType": "contract IKeplerFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_INVITER_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LOCK_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "crycleId",
          "type": "uint256"
        }
      ],
      "name": "addCrycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mainfest",
          "type": "string"
        }
      ],
      "name": "createCrycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "crycleInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mainfest",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "userNum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crycleUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "doVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IKeplerFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextVoteId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sds",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "user",
      "outputs": [
        {
          "internalType": "contract IUser",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCrycle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voteInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "voteId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beginAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "countAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x11fe42432c2122cd801deb5b030bfc3ba5c874a077723234e4b3a8e8f46d6430",
  "receipt": {
    "to": null,
    "from": "0x5C7b53292f4444674A674667887E781e4C4649d7",
    "contractAddress": "0x556eD33ea22476Ea9B8f39bC2e6a5972Dd28bac8",
    "transactionIndex": 13,
    "gasUsed": "1832173",
    "logsBloom": "0x00000000000000000000000000000000000000002000000000a00000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000400000020000000000000000000800000000000000000000000000000000400000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x37f2c4eea5d3d83cffdb4bed8aacc2a4203dd9f956684094542556a26be13a91",
    "transactionHash": "0x11fe42432c2122cd801deb5b030bfc3ba5c874a077723234e4b3a8e8f46d6430",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 10211623,
        "transactionHash": "0x11fe42432c2122cd801deb5b030bfc3ba5c874a077723234e4b3a8e8f46d6430",
        "address": "0x556eD33ea22476Ea9B8f39bC2e6a5972Dd28bac8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005c7b53292f4444674a674667887e781e4c4649d7"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x37f2c4eea5d3d83cffdb4bed8aacc2a4203dd9f956684094542556a26be13a91"
      }
    ],
    "blockNumber": 10211623,
    "cumulativeGasUsed": "2436079",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x26CeF7683a8dC396e8456B015031766F17d2E2d7",
    "0xA5C2320a994A43392444E81387E7B99B1D8DDe7A",
    "0xD7AD7Cce0FDB83b05630E7b27957A6d2F6C597d4",
    "0xbd2F3a31154AfB86bA921E4f418C46FdAf2737BE",
    "0x43b23adfB319D309C5466295ACCA1800430d1Ba6",
    "0xdC569F7e64699Df55420724E53db3bb9f733E7eE"
  ],
  "solcInputHash": "069546371c1ebabbc356d0dc68cd1fda",
  "metadata": "{\"compiler\":{\"version\":\"0.7.2+commit.51b20bc0\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUser\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_busd\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_sds\",\"type\":\"address\"},{\"internalType\":\"contract IKeplerFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_INVITER_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCK_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crycleId\",\"type\":\"uint256\"}],\"name\":\"addCrycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainfest\",\"type\":\"string\"}],\"name\":\"createCrycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crycleInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainfest\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crycleUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"doVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IKeplerFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextVoteId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sds\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user\",\"outputs\":[{\"internalType\":\"contract IUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCrycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beginAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/Crycle.sol\":\"Crycle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/farm/Crycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../interfaces/IKeplerFactory.sol';\\nimport '../interfaces/IKeplerToken.sol';\\nimport '../interfaces/IKeplerPair.sol';\\nimport '../interfaces/IMasterChef.sol';\\nimport '../interfaces/IUser.sol';\\n\\ncontract Crycle is Ownable {\\n    using SafeMath for uint256;\\n\\n    struct CrycleInfo {\\n        address creator;\\n        string title;\\n        string mainfest;\\n        uint256 userNum;\\n    }\\n\\n    struct VoteInfo {\\n        uint voteId;\\n        uint beginAt;\\n        uint countAt;\\n        uint finishAt;\\n    }\\n\\n    VoteInfo[] public voteInfo;\\n    mapping(uint256 => mapping(uint256 => uint256)) crycleVotes;\\n    mapping(uint256 => mapping(uint256 => uint256)) crycleVoteUserNum;\\n    mapping(uint256 => mapping(address => uint256)) userVotes;\\n\\n\\n    CrycleInfo[] public crycleInfo;\\n    mapping(uint256 => mapping(address => uint256)) public crycleUsers;\\n    mapping(address => uint256) public userCrycle;\\n    uint256 currentVoteId;\\n\\n    IUser public user;\\n    IMasterChef public masterChef;\\n    IKeplerPair public pair;\\n    IERC20 public busd;\\n    IERC20 public sds;\\n    IKeplerFactory public factory;\\n\\n    uint256 constant public MIN_LOCK_AMOUNT = 500 * 1e18;\\n    uint256 constant public MIN_INVITER_AMOUNT = 5000 * 1e18;\\n\\n    constructor(IUser _user, IMasterChef _masterChef, IKeplerPair _pair, IERC20 _busd, IERC20 _sds, IKeplerFactory _factory) {\\n        crycleInfo.push(CrycleInfo({\\n            creator: address(this),\\n            title: \\\"\\\",\\n            mainfest: \\\"\\\",\\n            userNum: 0\\n        }));\\n        voteInfo.push(VoteInfo({\\n            voteId: 0,\\n            beginAt: block.timestamp,\\n            countAt: block.timestamp,\\n            finishAt: block.timestamp\\n        }));\\n        user = _user;\\n        masterChef = _masterChef;\\n        pair = _pair;\\n        busd = _busd;\\n        sds = _sds;\\n        factory = _factory;\\n    }\\n\\n    function getPairTokenPrice(IKeplerPair _pair, IERC20 token) internal view returns(uint price) {\\n        address token0 = _pair.token0();\\n        address token1 = _pair.token1();\\n        require(token0 == address(token) || token1 == address(token), \\\"illegal token\\\");\\n        (uint reserve0, uint reserve1,) = _pair.getReserves();\\n        if (address(token) == token0) {\\n            if (reserve0 != 0) {\\n                return IERC20(token0).balanceOf(address(_pair)).mul(1e18).div(reserve0);\\n            }\\n        } else if (address(token) == token1) {\\n            if (reserve1 != 0) {\\n                return IERC20(token1).balanceOf(address(_pair)).mul(1e18).div(reserve1);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function canCreateCrycle(address _user) internal view returns (bool) {\\n        uint price = getPairTokenPrice(pair, busd);\\n        uint balanceUser = masterChef.getUserAmount(pair, _user, 3);\\n        uint balanceInviter = masterChef.getInviterAmount(pair, _user);\\n        if (balanceUser.mul(price).div(1e18) >= MIN_LOCK_AMOUNT || balanceInviter.mul(price).div(1e18) >= MIN_INVITER_AMOUNT) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function createCrycle(string memory title, string memory mainfest) external {\\n        require(bytes(title).length <= 32, \\\"title too long\\\");\\n        require(bytes(mainfest).length <= 1024, \\\"mainfest too long\\\");\\n        require(canCreateCrycle(msg.sender), \\\"at lease lock 500 BUSD and SDS or invite 5000 BUSD and SDS\\\");\\n        crycleInfo.push(CrycleInfo({\\n            creator: msg.sender,\\n            title: title,\\n            mainfest: mainfest,\\n            userNum: 0\\n        }));\\n    }\\n\\n    function addCrycle(uint256 crycleId) external {\\n        require(crycleId > 0 && crycleId < crycleInfo.length, \\\"illegal crycleId\\\");\\n        require(userCrycle[msg.sender] == 0, \\\"already in crycle\\\");\\n        crycleUsers[crycleId][msg.sender] = block.timestamp;\\n        userCrycle[msg.sender] = crycleId;\\n        crycleInfo[crycleId].userNum = crycleInfo[crycleId].userNum.add(1);\\n    }\\n\\n    function startVote() external onlyOwner {\\n        uint _currentVoteId = nextVoteId();\\n        setNextVoteId();\\n        if (_currentVoteId > 1 && voteInfo[_currentVoteId - 1].finishAt > block.timestamp) {\\n            require(false, \\\"last vote not finish\\\");\\n        }\\n        masterChef.createSnapshot(_currentVoteId);\\n        IKeplerToken(address(sds)).createSnapshot(_currentVoteId);\\n        factory.createSnapshot(address(pair), _currentVoteId);\\n        voteInfo.push(VoteInfo({\\n            voteId: _currentVoteId,\\n            beginAt: block.timestamp,\\n            countAt: block.timestamp + 5 * 24 * 3600,\\n            finishAt: block.timestamp + 7 * 24 * 3600\\n        }));\\n    }\\n\\n    function doVote(uint num) external {\\n        uint tokenVotes = IKeplerToken(address(sds)).getUserSnapshot(msg.sender);\\n        (uint price0, uint price1) = factory.getSnapshotPrice(pair);\\n        uint price = address(sds) == pair.token0() ? price0 : price1;\\n        uint pairVotes = factory.getSnapshotBalance(pair, msg.sender);\\n        uint lockVotes = masterChef.getUserSnapshot(address(pair), msg.sender);\\n        uint totalVotes = tokenVotes.add(price.mul(pairVotes.div(1e18))).add(price.mul(lockVotes).div(1e18)).mul(100);\\n        if (crycleVotes[currentVoteId][userCrycle[msg.sender]] == 0) {\\n            crycleVoteUserNum[currentVoteId][userCrycle[msg.sender]] = crycleVoteUserNum[currentVoteId][userCrycle[msg.sender]].add(1);\\n        }\\n        crycleVotes[currentVoteId][userCrycle[msg.sender]] = crycleVotes[currentVoteId][userCrycle[msg.sender]].add(num);\\n        userVotes[currentVoteId][msg.sender] = userVotes[currentVoteId][msg.sender].add(num);\\n        require(userVotes[currentVoteId][msg.sender] <= totalVotes, \\\"illegal vote num\\\");\\n    }\\n\\n    function nextVoteId() public view returns (uint256) {\\n        return currentVoteId.add(1);\\n    }\\n\\n    function setNextVoteId() internal {\\n        currentVoteId = currentVoteId.add(1);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd97f341aebd3da1199e37d099a01a916724bcf684a980452f3c851bc5345c1dd\",\"license\":\"MIT\"},\"contracts/interfaces/IKeplerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport './IKeplerPair.sol';\\n\\ninterface IKeplerFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function expectPairFor(address token0, address token1) external view returns (address);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n\\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\\n\\n    function getTransferFee(address[] memory tokens) external view returns (uint[] memory);\\n\\n    function _beforeTokenTransfer(address token0, address token1, address from, address to, uint256 amount) external;\\n\\n    function createSnapshot(address pair, uint256 id) external;\\n\\n    function getUserSnapshot(address user) external view returns (uint256);\\n\\n    function getSnapshotPrice(IKeplerPair pair) external view returns(uint price0, uint price1);\\n\\n    function getSnapshotBalance(IKeplerPair pair, address user) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x27cd36e7864c0e14cf29b856f801e0dc9194238400cde82103904cf809c93e0b\",\"license\":\"MIT\"},\"contracts/interfaces/IKeplerPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IKeplerPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x431055bf9132690a9d5db0308634f2dd75bbcb0c8e78bc7e6bf815388d78bccc\",\"license\":\"MIT\"},\"contracts/interfaces/IKeplerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\nimport './IKeplerPair.sol';\\n\\ninterface IKeplerToken {\\n\\n    function createSnapshot(uint256 id) external;\\n\\n    function getUserSnapshot(address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xe7d2b78d0e31b03dea0ff94a1e92ccff87cd5c662ba22135db80c8b16992c962\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IKeplerPair.sol';\\n\\ninterface IMasterChef {\\n\\n    function getUserAmount(IKeplerPair pair, address user, uint lockType) external view returns (uint);\\n\\n    function getInviterAmount(IKeplerPair pair, address inviter) external view returns (uint);\\n\\n    function createSnapshot(uint256 id) external;\\n\\n    function getUserSnapshot(address pair, address _user) external view returns (uint256);\\n\\n    function doMiner(IKeplerPair pair, IERC20 token, uint256 amount) external;\\n\\n    function deposit(IKeplerPair _pair, uint256 _amount, uint256 _lockType) external;\\n\\n    function depositFor(IKeplerPair _pair, uint256 _amount, uint256 _lockType, address to) external;\\n\\n    function getPoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare);\\n\\n    function getUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending);\\n\\n    function getInvitePoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare);\\n\\n    function getInviteUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending);\\n\\n    function doInviteMiner(IKeplerPair pair, IERC20 token, uint256 amount) external;\\n\\n    function userLockNum(IKeplerPair _pair, address user) external view returns (uint256);\\n\\n    function userLockInfo(IKeplerPair _pair, address _user, uint256 id) external view returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x4eb43c8c86b52a7a8264aa78c7ba90cb39a67d412293cc1a2c7637a6d957403c\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IUser {\\n\\n    function inviter(address user) external view returns (address);\\n\\n    function inviteNume(address user) external view returns (uint256);\\n\\n    function userNum() external view returns (uint256);\\n\\n    function registe(address _inviter) external;\\n\\n    function userExists(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x00192282a7af750d948b41e0e1782901ec105184a853bbb8c5d0585244fadb88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e7d38038062001e7d833981810160405260c08110156200003757600080fd5b508051602082015160408301516060840151608085015160a0909501519394929391929091600062000068620002e6565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060408051608081018252308152815160208082018452600080835281840192835284518083018652818152948401949094526060830184905260058054600181018255945282517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600490950294850180546001600160a01b0319166001600160a01b0390921691909117815591518051939492936200017a937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db101929190910190620002ea565b506040820151805162000198916002840191602090910190620002ea565b50606091820151600391909101556040805160808101825260008082524260208301818152938301818152948301908152600180548082018255925291517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660049092029182015591517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf783015591517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf882015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf990910155600980546001600160a01b03199081166001600160a01b0398891617909155600a8054821696881696909617909555600b8054861694871694909417909355600c8054851692861692909217909155600d80548416918516919091179055600e8054909216921691909117905562000386565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032d57805160ff19168380011785556200035d565b828001600101855582156200035d579182015b828111156200035d57825182559160200191906001019062000340565b506200036b9291506200036f565b5090565b5b808211156200036b576000815560010162000370565b611ae780620003966000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638494ff35116100ad578063c45a015511610071578063c45a01551461038a578063d347eed714610392578063dd764abf146104bf578063e207d04d146104c7578063f2fde38b146104cf5761012c565b80638494ff351461021d5780638da5cb5b14610260578063a0e6248514610268578063a8aa1b311461037a578063b1d52687146103825761012c565b80634c0a6af0116100f45780634c0a6af0146101f55780634f8632ba146101fd578063575a86b214610205578063687ceaa51461020d578063715018a6146102155761012c565b806306aa467214610131578063124258c61461016f578063254068b01461018e5780633a4ae634146101b45780633ca5b234146101d1575b600080fd5b61015d6004803603604081101561014757600080fd5b50803590602001356001600160a01b03166104f5565b60408051918252519081900360200190f35b61018c6004803603602081101561018557600080fd5b5035610512565b005b61015d600480360360208110156101a457600080fd5b50356001600160a01b031661099c565b61018c600480360360208110156101ca57600080fd5b50356109ae565b6101d9610ad9565b604080516001600160a01b039092168252519081900360200190f35b61018c610ae8565b6101d9610e03565b6101d9610e12565b61015d610e21565b61018c610e2f565b61023a6004803603602081101561023357600080fd5b5035610eed565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101d9610f24565b6102856004803603602081101561027e57600080fd5b5035610f33565b60405180856001600160a01b031681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156102db5781810151838201526020016102c3565b50505050905090810190601f1680156103085780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561033b578181015183820152602001610323565b50505050905090810190601f1680156103685780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6101d961108f565b6101d961109e565b6101d96110ad565b61018c600480360360408110156103a857600080fd5b8101906020810181356401000000008111156103c357600080fd5b8201836020820111156103d557600080fd5b803590602001918460018302840111640100000000831117156103f757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561044a57600080fd5b82018360208201111561045c57600080fd5b8035906020019184600183028401116401000000008311171561047e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110bc945050505050565b61015d611273565b61015d611280565b61018c600480360360208110156104e557600080fd5b50356001600160a01b0316611296565b600660209081526000928352604080842090915290825290205481565b600d546040805163b68d0a0960e01b815233600482015290516000926001600160a01b03169163b68d0a09916024808301926020929190829003018186803b15801561055d57600080fd5b505afa158015610571573d6000803e3d6000fd5b505050506040513d602081101561058757600080fd5b5051600e54600b5460408051631e6e234160e31b81526001600160a01b03928316600482015281519495506000948594939093169263f3711a0892602480840193919291829003018186803b1580156105df57600080fd5b505afa1580156105f3573d6000803e3d6000fd5b505050506040513d604081101561060957600080fd5b508051602091820151600b5460408051630dfe168160e01b815290519396509194506000936001600160a01b0390911692630dfe1681926004808201939291829003018186803b15801561065c57600080fd5b505afa158015610670573d6000803e3d6000fd5b505050506040513d602081101561068657600080fd5b5051600d546001600160a01b039081169116146106a357816106a5565b825b600e54600b546040805163fa80ccd760e01b81526001600160a01b0392831660048201523360248201529051939450600093919092169163fa80ccd7916044808301926020929190829003018186803b15801561070157600080fd5b505afa158015610715573d6000803e3d6000fd5b505050506040513d602081101561072b57600080fd5b5051600a54600b5460408051632d2d55eb60e01b81526001600160a01b03928316600482015233602482015290519394506000939190921691632d2d55eb916044808301926020929190829003018186803b15801561078957600080fd5b505afa15801561079d573d6000803e3d6000fd5b505050506040513d60208110156107b357600080fd5b50519050600061080f60646108096107dd670de0b6b3a76400006107d789886113aa565b9061140c565b6108036107fc6107f589670de0b6b3a764000061140c565b8a906113aa565b8c90611473565b90611473565b906113aa565b6008546000908152600260209081526040808320338452600783528184205484529091529020549091506108975760085460009081526003602090815260408083203384526007835281842054845290915290205461086f906001611473565b6008546000908152600360209081526040808320338452600783528184205484529091529020555b6008546000908152600260209081526040808320338452600783528184205484529091529020546108c89089611473565b6008805460009081526002602090815260408083203380855260078452828520548552908352818420959095559254825260048152828220938252929092529020546109149089611473565b60088054600090815260046020818152604080842033808652908352818520969096559354835290815282822093825292909252902054811015610992576040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c20766f7465206e756d60801b604482015290519081900360640190fd5b5050505050505050565b60076020526000908152604090205481565b6000811180156109bf575060055481105b610a03576040805162461bcd60e51b815260206004820152601060248201526f1a5b1b1959d85b0818dc9e58db19525960821b604482015290519081900360640190fd5b3360009081526007602052604090205415610a59576040805162461bcd60e51b8152602060048201526011602482015270616c726561647920696e20637279636c6560781b604482015290519081900360640190fd5b600081815260066020908152604080832033845282528083204290556007909152902081905560058054610ab49160019184908110610a9457fe5b90600052602060002090600402016003015461147390919063ffffffff16565b60058281548110610ac157fe5b90600052602060002090600402016003018190555050565b600c546001600160a01b031681565b610af06114cd565b6001600160a01b0316610b01610f24565b6001600160a01b031614610b5c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000610b66611280565b9050610b706114d1565b600181118015610b9f575042600180830381548110610b8b57fe5b906000526020600020906004020160030154115b15610be8576040805162461bcd60e51b81526020600482015260146024820152730d8c2e6e840ecdee8ca40dcdee840ccd2dcd2e6d60631b604482015290519081900360640190fd5b600a546040805163964f551760e01b81526004810184905290516001600160a01b039092169163964f55179160248082019260009290919082900301818387803b158015610c3557600080fd5b505af1158015610c49573d6000803e3d6000fd5b5050600d546040805163964f551760e01b81526004810186905290516001600160a01b03909216935063964f5517925060248082019260009290919082900301818387803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b5050600e54600b5460408051631181ee7b60e31b81526001600160a01b039283166004820152602481018790529051919092169350638c0f73d89250604480830192600092919082900301818387803b158015610d0a57600080fd5b505af1158015610d1e573d6000803e3d6000fd5b505060408051608081018252938452426020850181815262069780820192860192835262093a809091016060860190815260018054808201825560009190915295517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660049097029687015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf786015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf8850155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf9909301929092555050565b6009546001600160a01b031681565b600a546001600160a01b031681565b69010f0cf064dd5920000081565b610e376114cd565b6001600160a01b0316610e48610f24565b6001600160a01b031614610ea3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60018181548110610efa57fe5b60009182526020909120600490910201805460018201546002830154600390930154919350919084565b6000546001600160a01b031690565b60058181548110610f4057fe5b600091825260209182902060049091020180546001808301805460408051601f60026000199685161561010002969096019093169490940491820187900487028401870190528083526001600160a01b039093169550929390929190830182828015610fed5780601f10610fc257610100808354040283529160200191610fed565b820191906000526020600020905b815481529060010190602001808311610fd057829003601f168201915b50505060028085018054604080516020601f600019610100600187161502019094169590950492830185900485028101850190915281815295969594509092509083018282801561107f5780601f106110545761010080835404028352916020019161107f565b820191906000526020600020905b81548152906001019060200180831161106257829003601f168201915b5050505050908060030154905084565b600b546001600160a01b031681565b600d546001600160a01b031681565b600e546001600160a01b031681565b602082511115611104576040805162461bcd60e51b815260206004820152600e60248201526d7469746c6520746f6f206c6f6e6760901b604482015290519081900360640190fd5b61040081511115611150576040805162461bcd60e51b81526020600482015260116024820152706d61696e6665737420746f6f206c6f6e6760781b604482015290519081900360640190fd5b611159336114e4565b6111945760405162461bcd60e51b815260040180806020018281038252603a815260200180611a57603a913960400191505060405180910390fd5b60408051608081018252338152602080820185815292820184905260006060830181905260058054600181018255915282517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600490920291820180546001600160a01b0319166001600160a01b0390921691909117815593518051939493611246937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190930192919091019061199d565b506040820151805161126291600284019160209091019061199d565b506060820151816003015550505050565b681b1ae4d6e2ef50000081565b600854600090611291906001611473565b905090565b61129e6114cd565b6001600160a01b03166112af610f24565b6001600160a01b03161461130a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661134f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611a316026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826113b957506000611406565b828202828482816113c657fe5b04146114035760405162461bcd60e51b8152600401808060200182810382526021815260200180611a916021913960400191505060405180910390fd5b90505b92915050565b6000808211611462576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161146b57fe5b049392505050565b600082820183811015611403576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b6008546114df906001611473565b600855565b600b54600c546000918291611505916001600160a01b03908116911661168c565b600a54600b5460408051632898262360e21b81526001600160a01b0392831660048201528783166024820152600360448201529051939450600093919092169163a260988c916064808301926020929190829003018186803b15801561156a57600080fd5b505afa15801561157e573d6000803e3d6000fd5b505050506040513d602081101561159457600080fd5b5051600a54600b5460408051632cae426b60e01b81526001600160a01b039283166004820152888316602482015290519394506000939190921691632cae426b916044808301926020929190829003018186803b1580156115f457600080fd5b505afa158015611608573d6000803e3d6000fd5b505050506040513d602081101561161e57600080fd5b50519050681b1ae4d6e2ef500000611642670de0b6b3a76400006107d785876113aa565b10158061166e575069010f0cf064dd5920000061166b670de0b6b3a76400006107d784876113aa565b10155b1561167f5760019350505050611687565b600093505050505b919050565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c857600080fd5b505afa1580156116dc573d6000803e3d6000fd5b505050506040513d60208110156116f257600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0387169163d21220a7916004808301926020929190829003018186803b15801561173a57600080fd5b505afa15801561174e573d6000803e3d6000fd5b505050506040513d602081101561176457600080fd5b505190506001600160a01b0382811690851614806117935750836001600160a01b0316816001600160a01b0316145b6117d4576040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b600080866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d606081101561183a57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b03868116908516141561191357811561190e57611903826107d7670de0b6b3a7640000876001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118d157600080fd5b505afa1580156118e5573d6000803e3d6000fd5b505050506040513d60208110156118fb57600080fd5b5051906113aa565b945050505050611406565b611990565b826001600160a01b0316866001600160a01b0316141561199057801561199057611903816107d7670de0b6b3a7640000866001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118d157600080fd5b5060009695505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119de57805160ff1916838001178555611a0b565b82800160010185558215611a0b579182015b82811115611a0b5782518255916020019190600101906119f0565b50611a17929150611a1b565b5090565b5b80821115611a175760008155600101611a1c56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736174206c65617365206c6f636b20353030204255534420616e6420534453206f7220696e766974652035303030204255534420616e6420534453536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220e882bf7d541678b1b7b50c3f503d2cf63331b9dc504f678180aa0d00c2f1300364736f6c63430007020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638494ff35116100ad578063c45a015511610071578063c45a01551461038a578063d347eed714610392578063dd764abf146104bf578063e207d04d146104c7578063f2fde38b146104cf5761012c565b80638494ff351461021d5780638da5cb5b14610260578063a0e6248514610268578063a8aa1b311461037a578063b1d52687146103825761012c565b80634c0a6af0116100f45780634c0a6af0146101f55780634f8632ba146101fd578063575a86b214610205578063687ceaa51461020d578063715018a6146102155761012c565b806306aa467214610131578063124258c61461016f578063254068b01461018e5780633a4ae634146101b45780633ca5b234146101d1575b600080fd5b61015d6004803603604081101561014757600080fd5b50803590602001356001600160a01b03166104f5565b60408051918252519081900360200190f35b61018c6004803603602081101561018557600080fd5b5035610512565b005b61015d600480360360208110156101a457600080fd5b50356001600160a01b031661099c565b61018c600480360360208110156101ca57600080fd5b50356109ae565b6101d9610ad9565b604080516001600160a01b039092168252519081900360200190f35b61018c610ae8565b6101d9610e03565b6101d9610e12565b61015d610e21565b61018c610e2f565b61023a6004803603602081101561023357600080fd5b5035610eed565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101d9610f24565b6102856004803603602081101561027e57600080fd5b5035610f33565b60405180856001600160a01b031681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156102db5781810151838201526020016102c3565b50505050905090810190601f1680156103085780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561033b578181015183820152602001610323565b50505050905090810190601f1680156103685780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6101d961108f565b6101d961109e565b6101d96110ad565b61018c600480360360408110156103a857600080fd5b8101906020810181356401000000008111156103c357600080fd5b8201836020820111156103d557600080fd5b803590602001918460018302840111640100000000831117156103f757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561044a57600080fd5b82018360208201111561045c57600080fd5b8035906020019184600183028401116401000000008311171561047e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110bc945050505050565b61015d611273565b61015d611280565b61018c600480360360208110156104e557600080fd5b50356001600160a01b0316611296565b600660209081526000928352604080842090915290825290205481565b600d546040805163b68d0a0960e01b815233600482015290516000926001600160a01b03169163b68d0a09916024808301926020929190829003018186803b15801561055d57600080fd5b505afa158015610571573d6000803e3d6000fd5b505050506040513d602081101561058757600080fd5b5051600e54600b5460408051631e6e234160e31b81526001600160a01b03928316600482015281519495506000948594939093169263f3711a0892602480840193919291829003018186803b1580156105df57600080fd5b505afa1580156105f3573d6000803e3d6000fd5b505050506040513d604081101561060957600080fd5b508051602091820151600b5460408051630dfe168160e01b815290519396509194506000936001600160a01b0390911692630dfe1681926004808201939291829003018186803b15801561065c57600080fd5b505afa158015610670573d6000803e3d6000fd5b505050506040513d602081101561068657600080fd5b5051600d546001600160a01b039081169116146106a357816106a5565b825b600e54600b546040805163fa80ccd760e01b81526001600160a01b0392831660048201523360248201529051939450600093919092169163fa80ccd7916044808301926020929190829003018186803b15801561070157600080fd5b505afa158015610715573d6000803e3d6000fd5b505050506040513d602081101561072b57600080fd5b5051600a54600b5460408051632d2d55eb60e01b81526001600160a01b03928316600482015233602482015290519394506000939190921691632d2d55eb916044808301926020929190829003018186803b15801561078957600080fd5b505afa15801561079d573d6000803e3d6000fd5b505050506040513d60208110156107b357600080fd5b50519050600061080f60646108096107dd670de0b6b3a76400006107d789886113aa565b9061140c565b6108036107fc6107f589670de0b6b3a764000061140c565b8a906113aa565b8c90611473565b90611473565b906113aa565b6008546000908152600260209081526040808320338452600783528184205484529091529020549091506108975760085460009081526003602090815260408083203384526007835281842054845290915290205461086f906001611473565b6008546000908152600360209081526040808320338452600783528184205484529091529020555b6008546000908152600260209081526040808320338452600783528184205484529091529020546108c89089611473565b6008805460009081526002602090815260408083203380855260078452828520548552908352818420959095559254825260048152828220938252929092529020546109149089611473565b60088054600090815260046020818152604080842033808652908352818520969096559354835290815282822093825292909252902054811015610992576040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c20766f7465206e756d60801b604482015290519081900360640190fd5b5050505050505050565b60076020526000908152604090205481565b6000811180156109bf575060055481105b610a03576040805162461bcd60e51b815260206004820152601060248201526f1a5b1b1959d85b0818dc9e58db19525960821b604482015290519081900360640190fd5b3360009081526007602052604090205415610a59576040805162461bcd60e51b8152602060048201526011602482015270616c726561647920696e20637279636c6560781b604482015290519081900360640190fd5b600081815260066020908152604080832033845282528083204290556007909152902081905560058054610ab49160019184908110610a9457fe5b90600052602060002090600402016003015461147390919063ffffffff16565b60058281548110610ac157fe5b90600052602060002090600402016003018190555050565b600c546001600160a01b031681565b610af06114cd565b6001600160a01b0316610b01610f24565b6001600160a01b031614610b5c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000610b66611280565b9050610b706114d1565b600181118015610b9f575042600180830381548110610b8b57fe5b906000526020600020906004020160030154115b15610be8576040805162461bcd60e51b81526020600482015260146024820152730d8c2e6e840ecdee8ca40dcdee840ccd2dcd2e6d60631b604482015290519081900360640190fd5b600a546040805163964f551760e01b81526004810184905290516001600160a01b039092169163964f55179160248082019260009290919082900301818387803b158015610c3557600080fd5b505af1158015610c49573d6000803e3d6000fd5b5050600d546040805163964f551760e01b81526004810186905290516001600160a01b03909216935063964f5517925060248082019260009290919082900301818387803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b5050600e54600b5460408051631181ee7b60e31b81526001600160a01b039283166004820152602481018790529051919092169350638c0f73d89250604480830192600092919082900301818387803b158015610d0a57600080fd5b505af1158015610d1e573d6000803e3d6000fd5b505060408051608081018252938452426020850181815262069780820192860192835262093a809091016060860190815260018054808201825560009190915295517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660049097029687015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf786015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf8850155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf9909301929092555050565b6009546001600160a01b031681565b600a546001600160a01b031681565b69010f0cf064dd5920000081565b610e376114cd565b6001600160a01b0316610e48610f24565b6001600160a01b031614610ea3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60018181548110610efa57fe5b60009182526020909120600490910201805460018201546002830154600390930154919350919084565b6000546001600160a01b031690565b60058181548110610f4057fe5b600091825260209182902060049091020180546001808301805460408051601f60026000199685161561010002969096019093169490940491820187900487028401870190528083526001600160a01b039093169550929390929190830182828015610fed5780601f10610fc257610100808354040283529160200191610fed565b820191906000526020600020905b815481529060010190602001808311610fd057829003601f168201915b50505060028085018054604080516020601f600019610100600187161502019094169590950492830185900485028101850190915281815295969594509092509083018282801561107f5780601f106110545761010080835404028352916020019161107f565b820191906000526020600020905b81548152906001019060200180831161106257829003601f168201915b5050505050908060030154905084565b600b546001600160a01b031681565b600d546001600160a01b031681565b600e546001600160a01b031681565b602082511115611104576040805162461bcd60e51b815260206004820152600e60248201526d7469746c6520746f6f206c6f6e6760901b604482015290519081900360640190fd5b61040081511115611150576040805162461bcd60e51b81526020600482015260116024820152706d61696e6665737420746f6f206c6f6e6760781b604482015290519081900360640190fd5b611159336114e4565b6111945760405162461bcd60e51b815260040180806020018281038252603a815260200180611a57603a913960400191505060405180910390fd5b60408051608081018252338152602080820185815292820184905260006060830181905260058054600181018255915282517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600490920291820180546001600160a01b0319166001600160a01b0390921691909117815593518051939493611246937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190930192919091019061199d565b506040820151805161126291600284019160209091019061199d565b506060820151816003015550505050565b681b1ae4d6e2ef50000081565b600854600090611291906001611473565b905090565b61129e6114cd565b6001600160a01b03166112af610f24565b6001600160a01b03161461130a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661134f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611a316026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826113b957506000611406565b828202828482816113c657fe5b04146114035760405162461bcd60e51b8152600401808060200182810382526021815260200180611a916021913960400191505060405180910390fd5b90505b92915050565b6000808211611462576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161146b57fe5b049392505050565b600082820183811015611403576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b6008546114df906001611473565b600855565b600b54600c546000918291611505916001600160a01b03908116911661168c565b600a54600b5460408051632898262360e21b81526001600160a01b0392831660048201528783166024820152600360448201529051939450600093919092169163a260988c916064808301926020929190829003018186803b15801561156a57600080fd5b505afa15801561157e573d6000803e3d6000fd5b505050506040513d602081101561159457600080fd5b5051600a54600b5460408051632cae426b60e01b81526001600160a01b039283166004820152888316602482015290519394506000939190921691632cae426b916044808301926020929190829003018186803b1580156115f457600080fd5b505afa158015611608573d6000803e3d6000fd5b505050506040513d602081101561161e57600080fd5b50519050681b1ae4d6e2ef500000611642670de0b6b3a76400006107d785876113aa565b10158061166e575069010f0cf064dd5920000061166b670de0b6b3a76400006107d784876113aa565b10155b1561167f5760019350505050611687565b600093505050505b919050565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c857600080fd5b505afa1580156116dc573d6000803e3d6000fd5b505050506040513d60208110156116f257600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0387169163d21220a7916004808301926020929190829003018186803b15801561173a57600080fd5b505afa15801561174e573d6000803e3d6000fd5b505050506040513d602081101561176457600080fd5b505190506001600160a01b0382811690851614806117935750836001600160a01b0316816001600160a01b0316145b6117d4576040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b600080866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d606081101561183a57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b03868116908516141561191357811561190e57611903826107d7670de0b6b3a7640000876001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118d157600080fd5b505afa1580156118e5573d6000803e3d6000fd5b505050506040513d60208110156118fb57600080fd5b5051906113aa565b945050505050611406565b611990565b826001600160a01b0316866001600160a01b0316141561199057801561199057611903816107d7670de0b6b3a7640000866001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118d157600080fd5b5060009695505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119de57805160ff1916838001178555611a0b565b82800160010185558215611a0b579182015b82811115611a0b5782518255916020019190600101906119f0565b50611a17929150611a1b565b5090565b5b80821115611a175760008155600101611a1c56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736174206c65617365206c6f636b20353030204255534420616e6420534453206f7220696e766974652035303030204255534420616e6420534453536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220e882bf7d541678b1b7b50c3f503d2cf63331b9dc504f678180aa0d00c2f1300364736f6c63430007020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1613,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "voteInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(VoteInfo)1610_storage)dyn_storage"
      },
      {
        "astId": 1619,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "crycleVotes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1625,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "crycleVoteUserNum",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1631,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "userVotes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1634,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "crycleInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(CrycleInfo)1601_storage)dyn_storage"
      },
      {
        "astId": 1640,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "crycleUsers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1644,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "userCrycle",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1646,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "currentVoteId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1648,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "user",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IUser)7662"
      },
      {
        "astId": 1650,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "masterChef",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IMasterChef)7628"
      },
      {
        "astId": 1652,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "pair",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IKeplerPair)7248"
      },
      {
        "astId": 1654,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "busd",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 1656,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "sds",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 1658,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "factory",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IKeplerFactory)7008"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(CrycleInfo)1601_storage)dyn_storage": {
        "base": "t_struct(CrycleInfo)1601_storage",
        "encoding": "dynamic_array",
        "label": "struct Crycle.CrycleInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(VoteInfo)1610_storage)dyn_storage": {
        "base": "t_struct(VoteInfo)1610_storage",
        "encoding": "dynamic_array",
        "label": "struct Crycle.VoteInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IKeplerFactory)7008": {
        "encoding": "inplace",
        "label": "contract IKeplerFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IKeplerPair)7248": {
        "encoding": "inplace",
        "label": "contract IKeplerPair",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef)7628": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_contract(IUser)7662": {
        "encoding": "inplace",
        "label": "contract IUser",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CrycleInfo)1601_storage": {
        "encoding": "inplace",
        "label": "struct Crycle.CrycleInfo",
        "members": [
          {
            "astId": 1594,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1596,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1598,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "mainfest",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1600,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "userNum",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VoteInfo)1610_storage": {
        "encoding": "inplace",
        "label": "struct Crycle.VoteInfo",
        "members": [
          {
            "astId": 1603,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "voteId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1605,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "beginAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1607,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "countAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1609,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "finishAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}