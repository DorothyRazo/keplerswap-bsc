{
  "address": "0x975B2c44F9cd6433077936A533823a8D94E7eA9C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUser",
          "name": "_user",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockType",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockType",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimInviteMine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimMine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "createSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSnapshotId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockType",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "doInviteMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "doMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getInvitePoolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0AccPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1AccPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getInviteUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Pending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        }
      ],
      "name": "getInviterAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0AccPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1AccPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockType",
          "type": "uint256"
        }
      ],
      "name": "getType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockType",
          "type": "uint256"
        }
      ],
      "name": "getUserAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Pending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inviterUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Pending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_snapshotCreateCaller",
          "type": "address"
        }
      ],
      "name": "setSnapshotCreateCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token0Pending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userLockInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expireAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userLockTypeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4920069315e67f5a12c16a1ad939107682c231359e0ba3d23787306efa97f744",
  "receipt": {
    "to": null,
    "from": "0x5C7b53292f4444674A674667887E781e4C4649d7",
    "contractAddress": "0x975B2c44F9cd6433077936A533823a8D94E7eA9C",
    "transactionIndex": 1,
    "gasUsed": "2952693",
    "logsBloom": "0x00000000000000000000000000000000000000002000000000a00000000000000000000100000000000000000000008000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000020000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5d6b93be8a41f47b034095eed9abead379a567534f58181743617f76b422def0",
    "transactionHash": "0x4920069315e67f5a12c16a1ad939107682c231359e0ba3d23787306efa97f744",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10141428,
        "transactionHash": "0x4920069315e67f5a12c16a1ad939107682c231359e0ba3d23787306efa97f744",
        "address": "0x975B2c44F9cd6433077936A533823a8D94E7eA9C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005c7b53292f4444674a674667887e781e4c4649d7"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5d6b93be8a41f47b034095eed9abead379a567534f58181743617f76b422def0"
      }
    ],
    "blockNumber": 10141428,
    "cumulativeGasUsed": "3049036",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x790C8012539F5f245e26BCEe14e47A53703e3f97"
  ],
  "solcInputHash": "b23861fd4cc5066e011dd2d307c05e17",
  "metadata": "{\"compiler\":{\"version\":\"0.7.2+commit.51b20bc0\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUser\",\"name\":\"_user\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockType\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockType\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimInviteMine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimMine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"createSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSnapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockType\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doInviteMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getInvitePoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0AccPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1AccPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getInviteUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"getInviterAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0AccPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1AccPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockType\",\"type\":\"uint256\"}],\"name\":\"getType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockType\",\"type\":\"uint256\"}],\"name\":\"getUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snapshotCreateCaller\",\"type\":\"address\"}],\"name\":\"setSnapshotCreateCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLockTypeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/farm/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '../interfaces/IKeplerPair.sol';\\nimport '../interfaces/IUser.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract MasterChef is Ownable {\\n    using SafeMath for uint256;\\n\\n    IUser user;\\n\\n    uint256 public currentSnapshotId;\\n    mapping(IKeplerPair => mapping(address => uint256)) userSnapshotId;\\n    mapping(IKeplerPair => mapping(address => uint256)) userSnapshotAmount;\\n    address snapshotCreateCaller;\\n\\n    struct UserLockInfo {\\n        uint256 amount;     \\n        uint256 shares;\\n        uint256 lockType;\\n        uint256 expireAt;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount;     \\n        uint256 shares;\\n        uint256 token0Debt;\\n        uint256 token1Debt;\\n        uint256 token0Pending;\\n        uint256 token1Pending;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 totalShares;\\n        uint256 token0AccPerShare;\\n        uint256 token1AccPerShare;\\n        bool avaliable;\\n    }\\n\\n    mapping(IKeplerPair => PoolInfo) poolInfo;\\n    mapping(IKeplerPair => mapping(address => UserInfo)) public userInfo;\\n    mapping(IKeplerPair => mapping(address => UserLockInfo[])) public userLockInfo;\\n    mapping(IKeplerPair => mapping(address => mapping(uint256 => uint256))) public userLockTypeAmount;\\n\\n    mapping(IKeplerPair => PoolInfo) inviterPoolInfo;\\n    mapping(IKeplerPair => mapping(address => UserInfo)) public inviterUserInfo;\\n\\n    uint256 constant RATIO = 1e18;\\n\\n    event Deposit(address indexed user, address indexed pair, uint256 amount, uint256 lockType);\\n    event Withdraw(address indexed user, uint256 lockID, uint256 amount, uint256 shares, uint256 lockType);\\n\\n    constructor(IUser _user) {\\n        user = _user;\\n    }\\n\\n    function setSnapshotCreateCaller(address _snapshotCreateCaller) external onlyOwner {\\n        snapshotCreateCaller = _snapshotCreateCaller;\\n    }\\n\\n    function addDefaultPool(IKeplerPair pair) internal {\\n        if (poolInfo[pair].avaliable == true) {\\n            return;\\n        }\\n        PoolInfo storage _poolInfo = poolInfo[pair];\\n        _poolInfo.avaliable = true;\\n        if (inviterPoolInfo[pair].avaliable == true) {\\n            return;\\n        }\\n        PoolInfo storage _inviterPoolInfo = inviterPoolInfo[pair];\\n        _inviterPoolInfo.avaliable = true;\\n    }\\n\\n    function doMiner(IKeplerPair pair, IERC20 token, uint256 amount) public {\\n        addDefaultPool(pair);\\n        address _token0 = pair.token0();\\n        address _token1 = pair.token1();\\n        require(address(token) == _token0 || address(token) == _token1, \\\"illegal token\\\");\\n        bool isToken0 = address(token) == _token0;\\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\\n        PoolInfo memory _poolInfo = poolInfo[pair];\\n        if (_poolInfo.totalShares == 0) {\\n            return;\\n        }\\n        if (isToken0) {\\n            poolInfo[pair].token0AccPerShare = _poolInfo.token0AccPerShare.add(amount.mul(RATIO).div(_poolInfo.totalShares));\\n        } else {\\n            poolInfo[pair].token1AccPerShare = _poolInfo.token1AccPerShare.add(amount.mul(RATIO).div(_poolInfo.totalShares));\\n        }\\n    }\\n\\n    function doInviteMiner(IKeplerPair pair, IERC20 token, uint256 amount) public {\\n        addDefaultPool(pair);\\n        address _token0 = pair.token0();\\n        address _token1 = pair.token1();\\n        require(address(token) == _token0 || address(token) == _token1, \\\"illegal token\\\");\\n        bool isToken0 = address(token) == _token0;\\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\\n        PoolInfo memory _poolInfo = inviterPoolInfo[pair];\\n        if (_poolInfo.totalShares == 0) {\\n            return;\\n        }\\n        if (isToken0) {\\n            inviterPoolInfo[pair].token0AccPerShare = _poolInfo.token0AccPerShare.add(amount.mul(RATIO).div(_poolInfo.totalShares));\\n        } else {\\n            inviterPoolInfo[pair].token1AccPerShare = _poolInfo.token1AccPerShare.add(amount.mul(RATIO).div(_poolInfo.totalShares));\\n        }\\n    }\\n\\n    function userClear(IKeplerPair _pair, address _user, PoolInfo memory _poolInfo, UserInfo memory _userInfo) internal {\\n        if (_userInfo.shares > 0) {\\n            uint256 token0Debt = _userInfo.shares.mul(_poolInfo.token0AccPerShare).div(RATIO);\\n            userInfo[_pair][_user].token0Pending = _userInfo.token0Pending.add(token0Debt.sub(_userInfo.token0Debt));\\n            userInfo[_pair][_user].token0Debt = token0Debt;\\n\\n            uint256 token1Debt = _userInfo.shares.mul(_poolInfo.token0AccPerShare).div(RATIO);\\n            userInfo[_pair][_user].token1Pending = _userInfo.token1Pending.add(token1Debt.sub(_userInfo.token1Debt));\\n            userInfo[_pair][_user].token1Debt = token1Debt;\\n        }\\n    }\\n\\n    function userClear(IKeplerPair _pair, address _user) internal {\\n        if (userInfo[_pair][_user].shares > 0) {\\n            uint256 token0Debt = userInfo[_pair][_user].shares.mul(poolInfo[_pair].token0AccPerShare).div(RATIO);\\n            userInfo[_pair][_user].token0Pending = userInfo[_pair][_user].token0Pending.add(token0Debt.sub(userInfo[_pair][_user].token0Debt));\\n            userInfo[_pair][_user].token0Debt = token0Debt;\\n\\n            uint256 token1Debt = userInfo[_pair][_user].shares.mul(poolInfo[_pair].token0AccPerShare).div(RATIO);\\n            userInfo[_pair][_user].token1Pending = userInfo[_pair][_user].token1Pending.add(token1Debt.sub(userInfo[_pair][_user].token1Debt));\\n            userInfo[_pair][_user].token1Debt = token1Debt;\\n        }\\n    }\\n\\n    function inviterClear(IKeplerPair _pair, address _user, PoolInfo memory _poolInfo, UserInfo memory _userInfo) internal {\\n        if (_userInfo.shares > 0) {\\n            uint userShares = userInfo[_pair][_user].shares;\\n\\n            uint256 token0Debt = _userInfo.shares.mul(_poolInfo.token0AccPerShare).div(RATIO);\\n            if (userShares > 0) {\\n                inviterUserInfo[_pair][_user].token0Pending = _userInfo.token0Pending.add(token0Debt.sub(_userInfo.token0Debt));\\n            }\\n            inviterUserInfo[_pair][_user].token0Debt = token0Debt;\\n\\n            uint256 token1Debt = _userInfo.shares.mul(_poolInfo.token0AccPerShare).div(RATIO);\\n            if (userShares > 0) {\\n                inviterUserInfo[_pair][_user].token1Pending = _userInfo.token1Pending.add(token1Debt.sub(_userInfo.token1Debt));\\n            }\\n            inviterUserInfo[_pair][_user].token1Debt = token1Debt;\\n        }\\n    }\\n\\n    function inviterClear(IKeplerPair _pair, address _user) internal {\\n        if (inviterUserInfo[_pair][_user].shares > 0) {\\n            uint256 token0Debt = inviterUserInfo[_pair][_user].shares.mul(inviterPoolInfo[_pair].token0AccPerShare).div(RATIO);\\n            inviterUserInfo[_pair][_user].token0Pending = inviterUserInfo[_pair][_user].token0Pending.add(token0Debt.sub(inviterUserInfo[_pair][_user].token0Debt));\\n            inviterUserInfo[_pair][_user].token0Debt = token0Debt;\\n\\n            uint256 token1Debt = inviterUserInfo[_pair][_user].shares.mul(inviterPoolInfo[_pair].token0AccPerShare).div(RATIO);\\n            inviterUserInfo[_pair][_user].token1Pending = inviterUserInfo[_pair][_user].token1Pending.add(token1Debt.sub(inviterUserInfo[_pair][_user].token1Debt));\\n            inviterUserInfo[_pair][_user].token1Debt = token1Debt;\\n        }\\n    }\\n\\n    function getType(uint lockType) public pure returns (uint256, uint256) {\\n        if (lockType == 0) {\\n            return (3, 0); \\n        } else if (lockType == 1) {\\n            return (10, 30 * 24 * 60 * 60);\\n        } else if (lockType == 2) {\\n            return (15, 90 * 24 * 60 * 60);\\n        } else if (lockType == 3) {\\n            return (30, 360* 24 * 60 * 60);\\n        } else {\\n            require (false, \\\"illegal lockType\\\");\\n        }\\n    }\\n\\n    function inviteDeposit(address _user, IKeplerPair _pair, uint256 _amount, uint256 _shares) internal {\\n        address _inviter = user.inviter(_user);\\n        require(_inviter != address(0), \\\"user not registe\\\");\\n        PoolInfo memory _poolInfo = inviterPoolInfo[_pair];\\n        UserInfo memory _userInfo = inviterUserInfo[_pair][_inviter];\\n        inviterClear(_pair, _user, _poolInfo, _userInfo);\\n        if (_shares > 0) {\\n            if (userInfo[_pair][_inviter].shares > 0) {\\n                inviterPoolInfo[_pair].totalShares = _poolInfo.totalShares.add(_shares); \\n            }\\n            inviterUserInfo[_pair][_inviter].shares = _userInfo.amount.add(_shares);\\n            inviterUserInfo[_pair][_inviter].amount = _userInfo.amount.add(_amount);\\n            inviterUserInfo[_pair][_inviter].token0Debt = _userInfo.shares.add(_shares).mul(_poolInfo.token0AccPerShare).div(RATIO);\\n            inviterUserInfo[_pair][_inviter].token1Debt = _userInfo.shares.add(_shares).mul(_poolInfo.token1AccPerShare).div(RATIO);\\n        }\\n    }\\n\\n    function deposit(IKeplerPair _pair, uint256 _amount, uint256 _lockType) external {\\n        addDefaultPool(_pair);\\n        (uint ratio, uint lockTime) = getType(_lockType);\\n        PoolInfo memory _poolInfo = poolInfo[_pair];\\n        UserInfo memory _userInfo = userInfo[_pair][msg.sender];\\n        userClear(_pair, msg.sender, _poolInfo, _userInfo);\\n        uint shares = _amount.mul(ratio);\\n        if (_amount > 0) {\\n            SafeERC20.safeTransferFrom(IERC20(address(_pair)), msg.sender, address(this), _amount);\\n            userLockInfo[_pair][msg.sender].push(UserLockInfo({\\n                amount: _amount,\\n                shares: shares,\\n                lockType: _lockType,\\n                expireAt: block.timestamp + lockTime\\n            }));\\n            if (_userInfo.shares == 0) {\\n                inviterClear(_pair, msg.sender);\\n                inviterPoolInfo[_pair].totalShares = inviterPoolInfo[_pair].totalShares.add(inviterUserInfo[_pair][msg.sender].shares);\\n            }\\n            poolInfo[_pair].totalShares = _poolInfo.totalShares.add(shares);\\n            userInfo[_pair][msg.sender].shares = _userInfo.shares.add(shares);\\n            userInfo[_pair][msg.sender].amount = _userInfo.amount.add(_amount);\\n            userInfo[_pair][msg.sender].token0Debt = _userInfo.shares.add(shares).mul(_poolInfo.token0AccPerShare).div(RATIO);\\n            userInfo[_pair][msg.sender].token1Debt = _userInfo.shares.add(shares).mul(_poolInfo.token1AccPerShare).div(RATIO);\\n            userLockTypeAmount[_pair][msg.sender][_lockType] = userLockTypeAmount[_pair][msg.sender][_lockType].add(_amount);\\n        }\\n        inviteDeposit(msg.sender, _pair, _amount, shares);\\n        emit Deposit(msg.sender, address(_pair), _amount, _lockType);\\n    }\\n\\n    function inviteWithdraw(address _user, IKeplerPair _pair, uint256 _amount, uint256 _shares) internal {\\n        address _inviter = user.inviter(_user);\\n        require(_inviter != address(0), \\\"user not registe\\\");\\n        PoolInfo memory _poolInfo = inviterPoolInfo[_pair];\\n        UserInfo memory _userInfo = inviterUserInfo[_pair][_inviter];\\n        inviterClear(_pair, msg.sender, _poolInfo, _userInfo);\\n        if (_shares > 0) {\\n            if (userInfo[_pair][_inviter].shares > 0) {\\n                inviterPoolInfo[_pair].totalShares = _poolInfo.totalShares.sub(_shares); \\n            }\\n            inviterUserInfo[_pair][_inviter].shares = _userInfo.amount.sub(_shares);\\n            inviterUserInfo[_pair][_inviter].amount = _userInfo.amount.sub(_amount);\\n        }\\n        inviterUserInfo[_pair][_inviter].token0Debt = _userInfo.shares.sub(_shares).mul(_poolInfo.token0AccPerShare).div(RATIO);\\n        inviterUserInfo[_pair][_inviter].token1Debt = _userInfo.shares.sub(_shares).mul(_poolInfo.token1AccPerShare).div(RATIO);\\n    }\\n\\n    function withdraw(IKeplerPair _pair, uint256 _lockId) external {\\n        uint userLockInfoNum = userLockInfo[_pair][msg.sender].length;\\n        require(_lockId < userLockInfoNum, \\\"illegal lockID\\\");\\n        UserLockInfo memory _userLockInfo = userLockInfo[_pair][msg.sender][_lockId];\\n        require (block.timestamp >= _userLockInfo.expireAt, \\\"not the right time\\\");\\n        PoolInfo memory _poolInfo = poolInfo[_pair];\\n        UserInfo memory _userInfo = userInfo[_pair][msg.sender];\\n        userClear(_pair, msg.sender, _poolInfo, _userInfo);\\n        poolInfo[_pair].totalShares = _poolInfo.totalShares.sub(_userLockInfo.shares); \\n        userInfo[_pair][msg.sender].shares = _userInfo.shares.sub(_userLockInfo.shares);\\n        userInfo[_pair][msg.sender].amount = _userInfo.amount.sub(_userLockInfo.amount);\\n        userLockTypeAmount[_pair][msg.sender][_userLockInfo.lockType] = userLockTypeAmount[_pair][msg.sender][_userLockInfo.lockType].sub(_userLockInfo.amount);\\n        if (_userInfo.shares == _userLockInfo.shares) {\\n            inviterClear(_pair, msg.sender);\\n            inviterPoolInfo[_pair].totalShares = inviterPoolInfo[_pair].totalShares.sub(inviterUserInfo[_pair][msg.sender].shares);\\n        }\\n        if (_userLockInfo.amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(address(_pair)), msg.sender, _userLockInfo.amount);\\n        }\\n        uint256 _amount = _userLockInfo.amount;\\n        uint256 _shares = _userLockInfo.shares;\\n        if (_lockId != userLockInfoNum - 1) {\\n            UserLockInfo memory lastUserLockInfo = userLockInfo[_pair][msg.sender][userLockInfoNum - 1];\\n            userLockInfo[_pair][msg.sender][_lockId].amount = lastUserLockInfo.amount;\\n            userLockInfo[_pair][msg.sender][_lockId].shares = lastUserLockInfo.shares;\\n            userLockInfo[_pair][msg.sender][_lockId].lockType = lastUserLockInfo.lockType;\\n            userLockInfo[_pair][msg.sender][_lockId].expireAt = lastUserLockInfo.expireAt;\\n        }\\n        userLockInfo[_pair][msg.sender].pop();\\n        userInfo[_pair][msg.sender].token0Debt = _userInfo.shares.sub(_shares).mul(_poolInfo.token0AccPerShare).div(RATIO);\\n        userInfo[_pair][msg.sender].token1Debt = _userInfo.shares.sub(_shares).mul(_poolInfo.token1AccPerShare).div(RATIO);\\n        inviteWithdraw(msg.sender, _pair, _amount, _shares);\\n        emit Withdraw(msg.sender, _lockId, _userLockInfo.amount, _userLockInfo.shares, _userLockInfo.lockType);\\n    }\\n\\n    function createSnapshot(uint256 id) external {\\n        require(msg.sender == snapshotCreateCaller, \\\"only snapshotCreateCaller can do this\\\");\\n        currentSnapshotId = id; \\n    }\\n\\n    function getUserSnapshot(address pair, address _user) external view returns (uint256) {\\n        if (currentSnapshotId == 0) {\\n            return userInfo[IKeplerPair(pair)][_user].amount;\\n        } else if (userSnapshotId[IKeplerPair(pair)][_user] == currentSnapshotId) {\\n            return userSnapshotAmount[IKeplerPair(pair)][_user];\\n        } else {\\n            return userInfo[IKeplerPair(pair)][_user].amount;\\n        }\\n    }\\n\\n    function _beforeDepositOrWithdraw(IKeplerPair pair, address _user, uint256 amount) internal {\\n        if (false) {\\n            amount;\\n        }\\n        if (currentSnapshotId == 0) {\\n            return;\\n        }\\n        if (userSnapshotId[pair][_user] < currentSnapshotId) {\\n            userSnapshotAmount[pair][_user] = userInfo[pair][_user].amount;\\n            userSnapshotId[pair][_user] = currentSnapshotId;\\n        }\\n    }\\n\\n    function getUserAmount(IKeplerPair pair, address _user, uint lockType) external view returns (uint) {\\n        return userLockTypeAmount[pair][_user][lockType];\\n    }\\n\\n    function getInviterAmount(IKeplerPair pair, address inviter) external view returns (uint) {\\n        return inviterUserInfo[pair][inviter].amount;\\n    }\\n\\n    function getPoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare) {\\n        PoolInfo memory _poolInfo = poolInfo[_pair];\\n        totalShares = _poolInfo.totalShares;\\n        token0AccPerShare = _poolInfo.token0AccPerShare;\\n        token1AccPerShare = _poolInfo.token1AccPerShare;\\n    }\\n\\n    function getUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending) {\\n        UserInfo memory _userInfo = userInfo[_pair][_user];\\n        amount = _userInfo.amount;\\n        shares = _userInfo.shares;\\n        token0Debt = _userInfo.token0Debt;\\n        token1Debt = _userInfo.token1Debt;\\n        token0Pending = _userInfo.token0Pending;\\n        token1Pending = _userInfo.token1Pending;\\n    }\\n\\n    function getInvitePoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare) {\\n        PoolInfo memory _poolInfo = inviterPoolInfo[_pair];\\n        totalShares = _poolInfo.totalShares;\\n        token0AccPerShare = _poolInfo.token0AccPerShare;\\n        token1AccPerShare = _poolInfo.token1AccPerShare;\\n    }\\n\\n    function getInviteUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending) {\\n        UserInfo memory _userInfo = inviterUserInfo[_pair][_user];\\n        amount = _userInfo.amount;\\n        shares = _userInfo.shares;\\n        token0Debt = _userInfo.token0Debt;\\n        token1Debt = _userInfo.token1Debt;\\n        token0Pending = _userInfo.token0Pending;\\n        token1Pending = _userInfo.token1Pending;\\n    }\\n\\n    function claimMine(IKeplerPair _pair, address _token) external {\\n        address token0 = _pair.token0();\\n        address token1 = _pair.token1();\\n        uint amount = 0;\\n        if (_token == token0) {\\n            uint acc = poolInfo[_pair].token0AccPerShare;\\n            uint shares = userInfo[_pair][msg.sender].shares;\\n            uint debt = userInfo[_pair][msg.sender].token0Debt;\\n            uint pending = userInfo[_pair][msg.sender].token0Pending;\\n            amount = acc.mul(shares).div(1e18).sub(debt).add(pending);\\n            userInfo[_pair][msg.sender].token0Debt = acc.mul(shares).div(1e18);\\n            userInfo[_pair][msg.sender].token0Pending = 0;\\n        } else if (_token == token1) {\\n            uint acc = poolInfo[_pair].token1AccPerShare;\\n            uint shares = userInfo[_pair][msg.sender].shares;\\n            uint debt = userInfo[_pair][msg.sender].token1Debt;\\n            uint pending = userInfo[_pair][msg.sender].token1Pending;\\n            amount = acc.mul(shares).div(1e18).sub(debt).add(pending);\\n            userInfo[_pair][msg.sender].token1Debt = acc.mul(shares).div(1e18);\\n            userInfo[_pair][msg.sender].token1Pending = 0;\\n        } else {\\n            require(false, \\\"illegal token\\\");\\n        }\\n        SafeERC20.safeTransfer(IERC20(_token), msg.sender, amount);\\n    }\\n\\n    function claimInviteMine(IKeplerPair _pair, address _token) external {\\n        address token0 = _pair.token0();\\n        address token1 = _pair.token1();\\n        uint amount = userInfo[_pair][msg.sender].amount;\\n        if (amount == 0) {\\n            return;\\n        }\\n        if (_token == token0) {\\n            uint acc = inviterPoolInfo[_pair].token0AccPerShare;\\n            uint shares = inviterUserInfo[_pair][msg.sender].shares;\\n            uint debt = inviterUserInfo[_pair][msg.sender].token0Debt;\\n            uint pending = inviterUserInfo[_pair][msg.sender].token0Pending;\\n            amount = acc.mul(shares).div(1e18).sub(debt).add(pending);\\n            inviterUserInfo[_pair][msg.sender].token0Debt = acc.mul(shares).div(1e18);\\n            inviterUserInfo[_pair][msg.sender].token0Pending = 0;\\n        } else if (_token == token1) {\\n            uint acc = inviterPoolInfo[_pair].token1AccPerShare;\\n            uint shares = inviterUserInfo[_pair][msg.sender].shares;\\n            uint debt = inviterUserInfo[_pair][msg.sender].token1Debt;\\n            uint pending = inviterUserInfo[_pair][msg.sender].token1Pending;\\n            amount = acc.mul(shares).div(1e18).sub(debt).add(pending);\\n            inviterUserInfo[_pair][msg.sender].token1Debt = acc.mul(shares).div(1e18);\\n            inviterUserInfo[_pair][msg.sender].token1Pending = 0;\\n        } else {\\n            require(false, \\\"illegal token\\\");\\n        }\\n        SafeERC20.safeTransfer(IERC20(_token), msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x25a1654aab5a0d8cd650b225e812f4712e5976ea654ed24fcdb952b7f684cd0f\",\"license\":\"MIT\"},\"contracts/interfaces/IKeplerPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IKeplerPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x431055bf9132690a9d5db0308634f2dd75bbcb0c8e78bc7e6bf815388d78bccc\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IUser {\\n\\n    function inviter(address user) external view returns (address);\\n\\n    function inviteNume(address user) external view returns (uint256);\\n\\n    function userNum() external view returns (uint256);\\n\\n    function registe(address _inviter) external;\\n\\n    function userExists(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x00192282a7af750d948b41e0e1782901ec105184a853bbb8c5d0585244fadb88\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200346538038062003465833981810160405260208110156200003757600080fd5b5051600062000045620000b5565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b0392909216919091179055620000b9565b3390565b61339c80620000c96000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063ceb04d531161007c578063ceb04d53146104d9578063cefbc4961461050f578063f2801fe714610535578063f2fde38b14610563578063f3fef3a314610589578063f741198f146105b557610158565b8063715018a61461042c5780638da5cb5b146104345780638f2a1e5114610458578063964f55171461047e578063970875ce1461049b578063a260988c146104a357610158565b80632526da0e116101155780632526da0e146102ee57806329aaf8731461031c5780632cae426b146103525780632d2d55eb146103925780633cb79e64146103c05780634036ab78146103f657610158565b806306bfa9381461015d57806308cc72d8146101a15780630efe6a8b146101fd5780630f208beb14610231578063132f129f1461029257806315d68ed7146102c0575b600080fd5b6101836004803603602081101561017357600080fd5b50356001600160a01b03166105e3565b60408051938452602084019290925282820152519081900360600190f35b6101d7600480360360608110156101b757600080fd5b506001600160a01b03813581169160208101359091169060400135610649565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61022f6004803603606081101561021357600080fd5b506001600160a01b03813516906020810135906040013561069b565b005b61025f6004803603604081101561024757600080fd5b506001600160a01b0381358116916020013516610a7b565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b61022f600480360360408110156102a857600080fd5b506001600160a01b0381358116916020013516610abb565b61022f600480360360408110156102d657600080fd5b506001600160a01b0381358116916020013516610dbf565b61025f6004803603604081101561030457600080fd5b506001600160a01b0381358116916020013516611031565b61022f6004803603606081101561033257600080fd5b506001600160a01b03813581169160208101359091169060400135611071565b6103806004803603604081101561036857600080fd5b506001600160a01b03813581169160200135166112dd565b60408051918252519081900360200190f35b610380600480360360408110156103a857600080fd5b506001600160a01b038135811691602001351661130a565b61022f600480360360608110156103d657600080fd5b506001600160a01b038135811691602081013590911690604001356113ca565b6104136004803603602081101561040c57600080fd5b503561161e565b6040805192835260208301919091528051918290030190f35b61022f6116bd565b61043c61177b565b604080516001600160a01b039092168252519081900360200190f35b61022f6004803603602081101561046e57600080fd5b50356001600160a01b031661178a565b61022f6004803603602081101561049457600080fd5b5035611820565b61038061186e565b610380600480360360608110156104b957600080fd5b506001600160a01b03813581169160208101359091169060400135611874565b610380600480360360608110156104ef57600080fd5b506001600160a01b038135811691602081013590911690604001356118aa565b6101836004803603602081101561052557600080fd5b50356001600160a01b03166118cd565b61025f6004803603604081101561054b57600080fd5b506001600160a01b0381358116916020013516611933565b61022f6004803603602081101561057957600080fd5b50356001600160a01b03166119c8565b61022f6004803603604081101561059f57600080fd5b506001600160a01b038135169060200135611adc565b61025f600480360360408110156105cb57600080fd5b506001600160a01b038135811691602001351661216c565b60008060006105f0613222565b505050506001600160a01b0316600090815260066020908152604091829020825160808101845281548082526001830154938201849052600283015494820185905260039092015460ff16151560609091015292909190565b6008602052826000526040600020602052816000526040600020818154811061066e57fe5b60009182526020909120600490910201805460018201546002830154600390930154919550935090915084565b6106a483612201565b6000806106b08361161e565b915091506106bc613222565b506001600160a01b03851660009081526006602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606082015261071561324c565b506001600160a01b03861660009081526007602090815260408083203380855290835292819020815160c0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015460a08201529061078b90889084846122a4565b600061079787866123b4565b90508615610a1d576107ab8833308a61240d565b6001600160a01b0388166000908152600860209081526040808320338452825280832081516080810183528b81528084018681529281018b8152428a01606083019081528354600181810186559488529686902092516004909702909201958655925191850191909155905160028401555160039092019190915582015161088c576108378833612467565b6001600160a01b0388166000818152600b60209081526040808320338452825280832060010154938352600a9091529020546108729161265f565b6001600160a01b0389166000908152600a60205260409020555b8251610898908261265f565b6001600160a01b0389166000908152600660209081526040909120919091558201516108c4908261265f565b6001600160a01b038916600090815260076020908152604080832033845290915290206001015581516108f7908861265f565b6001600160a01b0389166000908152600760209081526040808320338452825290912091909155838101519083015161094f91670de0b6b3a7640000916109499190610943908661265f565b906123b4565b906126b9565b6001600160a01b0389166000908152600760209081526040808320338452825291829020600201929092558401519083015161099e91670de0b6b3a7640000916109499190610943908661265f565b6001600160a01b03891660008181526007602090815260408083203380855290835281842060030195909555928252600981528282209382529283528181208982529092529020546109f0908861265f565b6001600160a01b038916600090815260096020908152604080832033845282528083208a84529091529020555b610a2933898984612720565b604080518881526020810188905281516001600160a01b038b169233927fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7929081900390910190a35050505050505050565b6007602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b6000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610af657600080fd5b505afa158015610b0a573d6000803e3d6000fd5b505050506040513d6020811015610b2057600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0386169163d21220a7916004808301926020929190829003018186803b158015610b6857600080fd5b505afa158015610b7c573d6000803e3d6000fd5b505050506040513d6020811015610b9257600080fd5b50516001600160a01b038516600090815260076020908152604080832033845290915290205490915080610bc857505050610dbb565b826001600160a01b0316846001600160a01b03161415610ca2576001600160a01b0385166000908152600a60209081526040808320600190810154600b8452828520338652909352922091820154600283015460049093015491929091610c4f81610c4984610c43670de0b6b3a76400006109498a8a6123b4565b90612a36565b9061265f565b9450610c67670de0b6b3a764000061094986866123b4565b6001600160a01b038a166000908152600b602090815260408083203384529091528120600281019290925560049091015550610dac92505050565b816001600160a01b0316846001600160a01b03161415610d6f576001600160a01b0385166000908152600a6020908152604080832060020154600b835281842033855290925290912060018101546003820154600590920154909190610d1c81610c4984610c43670de0b6b3a76400006109498a8a6123b4565b9450610d34670de0b6b3a764000061094986866123b4565b6001600160a01b038a166000908152600b602090815260408083203384529091528120600381019290925560059091015550610dac92505050565b6040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b610db7843383612a93565b5050505b5050565b6000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610dfa57600080fd5b505afa158015610e0e573d6000803e3d6000fd5b505050506040513d6020811015610e2457600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0386169163d21220a7916004808301926020929190829003018186803b158015610e6c57600080fd5b505afa158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b5051905060006001600160a01b038481169084161415610f64576001600160a01b038516600090815260066020908152604080832060019081015460078452828520338652909352922091820154600283015460049093015491929091610f1181610c4984610c43670de0b6b3a76400006109498a8a6123b4565b9450610f29670de0b6b3a764000061094986866123b4565b6001600160a01b038a1660009081526007602090815260408083203384529091528120600281019290925560049091015550610dac92505050565b816001600160a01b0316846001600160a01b03161415610d6f576001600160a01b0385166000908152600660209081526040808320600201546007835281842033855290925290912060018101546003820154600590920154909190610fde81610c4984610c43670de0b6b3a76400006109498a8a6123b4565b9450610ff6670de0b6b3a764000061094986866123b4565b6001600160a01b038a1660009081526007602090815260408083203384529091528120600381019290925560059091015550610dac92505050565b600b602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b61107a83612201565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d60208110156110df57600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0387169163d21220a7916004808301926020929190829003018186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d602081101561115157600080fd5b505190506001600160a01b0384811690831614806111805750806001600160a01b0316846001600160a01b0316145b6111c1576040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b6001600160a01b03848116908316146111dc8533308761240d565b6111e4613222565b506001600160a01b038616600090815260066020908152604091829020825160808101845281548082526001830154938201939093526002820154938101939093526003015460ff161515606083015261124157505050506112d8565b811561128f57805161126e906112639061094988670de0b6b3a76400006123b4565b60208301519061265f565b6001600160a01b0388166000908152600660205260409020600101556112d3565b80516112b6906112ab9061094988670de0b6b3a76400006123b4565b60408301519061265f565b6001600160a01b0388166000908152600660205260409020600201555b505050505b505050565b6001600160a01b038083166000908152600b60209081526040808320938516835292905220545b92915050565b60006002546000141561134357506001600160a01b03808316600090815260076020908152604080832093851683529290522054611304565b6002546001600160a01b03808516600090815260036020908152604080832093871683529290522054141561139e57506001600160a01b03808316600090815260046020908152604080832093851683529290522054611304565b506001600160a01b03808316600090815260076020908152604080832093851683529290522054611304565b6113d383612201565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561140e57600080fd5b505afa158015611422573d6000803e3d6000fd5b505050506040513d602081101561143857600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0387169163d21220a7916004808301926020929190829003018186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d60208110156114aa57600080fd5b505190506001600160a01b0384811690831614806114d95750806001600160a01b0316846001600160a01b0316145b61151a576040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b6001600160a01b03848116908316146115358533308761240d565b61153d613222565b506001600160a01b0386166000908152600a6020908152604091829020825160808101845281548082526001830154938201939093526002820154938101939093526003015460ff161515606083015261159a57505050506112d8565b81156115dd5780516115bc906112639061094988670de0b6b3a76400006123b4565b6001600160a01b0388166000908152600a60205260409020600101556112d3565b80516115f9906112ab9061094988670de0b6b3a76400006123b4565b6001600160a01b0388166000908152600a602052604090206002015550505050505050565b6000808261163257506003905060006116b8565b82600114156116495750600a905062278d006116b8565b82600214156116605750600f90506276a7006116b8565b82600314156116785750601e90506301da9c006116b8565b6040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c206c6f636b5479706560801b604482015290519081900360640190fd5b915091565b6116c5612ae5565b6001600160a01b03166116d661177b565b6001600160a01b031614611731576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b611792612ae5565b6001600160a01b03166117a361177b565b6001600160a01b0316146117fe576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146118695760405162461bcd60e51b81526004018080602001828103825260258152602001806132f76025913960400191505060405180910390fd5b600255565b60025481565b6001600160a01b0380841660009081526009602090815260408083209386168352928152828220848352905220545b9392505050565b600960209081526000938452604080852082529284528284209052825290205481565b60008060006118da613222565b505050506001600160a01b03166000908152600a6020908152604091829020825160808101845281548082526001830154938201849052600283015494820185905260039092015460ff16151560609091015292909190565b60008060008060008061194461324c565b505050506001600160a01b039485166000908152600760209081526040808320969097168252948552859020855160c08101875281548082526001830154968201879052600283015497820188905260038301546060830181905260048401546080840181905260059094015460a090930183905290989697969095509193509150565b6119d0612ae5565b6001600160a01b03166119e161177b565b6001600160a01b031614611a3c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611a815760405162461bcd60e51b81526004018080602001828103825260268152602001806132ab6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600860209081526040808320338452909152902054808210611b45576040805162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081b1bd8dad25160921b604482015290519081900360640190fd5b611b4d613282565b6001600160a01b03841660009081526008602090815260408083203384529091529020805484908110611b7c57fe5b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060600151421015611c0d576040805162461bcd60e51b81526020600482015260126024820152716e6f74207468652072696768742074696d6560701b604482015290519081900360640190fd5b611c15613222565b506001600160a01b03841660009081526006602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff1615156060820152611c6e61324c565b506001600160a01b03851660009081526007602090815260408083203380855290835292819020815160c0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015460a082015290611ce490879084846122a4565b60208301518251611cf491612a36565b6001600160a01b0387166000908152600660209081526040909120919091558381015190820151611d2491612a36565b6001600160a01b038716600090815260076020908152604080832033845290915290206001015582518151611d5891612a36565b6001600160a01b0387166000818152600760209081526040808320338085529083528184209590955587519383526009825280832094835293815283822087850151835290529190912054611dac91612a36565b6001600160a01b0387166000908152600960209081526040808320338452825280832087820151845282529091209190915583810151908201511415611e4b57611df68633612467565b6001600160a01b0386166000818152600b60209081526040808320338452825280832060010154938352600a909152902054611e3191612a36565b6001600160a01b0387166000908152600a60205260409020555b825115611e6157611e6186338560000151612a93565b825160208401516000198601871461200357611e7b613282565b6001600160a01b0389166000908152600860209081526040808320338452909152902080546000198901908110611eae57fe5b60009182526020808320604080516080810182526004909402909101805480855260018201548585015260028201548584015260039091015460608501526001600160a01b038e168552600883528185203386529092529092208054919350908a908110611f1857fe5b60009182526020808320600490920290910192909255828201516001600160a01b038c16825260088352604080832033845290935291902080548a908110611f5c57fe5b60009182526020808320600160049093020191909101929092556040808401516001600160a01b038d16835260088452818320338452909352902080548a908110611fa357fe5b600091825260208083206002600490930201919091019290925560608301516001600160a01b038c16825260088352604080832033845290935291902080548a908110611fec57fe5b906000526020600020906004020160030181905550505b6001600160a01b0388166000908152600860209081526040808320338452909152902080548061202f57fe5b600082815260208082206004600019909401938402018281556001810183905560028101839055600301919091559155848101519084015161208491670de0b6b3a76400009161094991906109439086612a36565b6001600160a01b038916600090815260076020908152604080832033845282529182902060020192909255850151908401516120d391670de0b6b3a76400009161094991906109439086612a36565b6001600160a01b03891660009081526007602090815260408083203380855292529091206003019190915561210a90898484612ae9565b845160208087015160408089015181518c815293840194909452828101919091526060820192909252905133917fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def35919081900360800190a25050505050505050565b60008060008060008061217d61324c565b505050506001600160a01b039485166000908152600b60209081526040808320969097168252948552859020855160c08101875281548082526001830154968201879052600283015497820188905260038301546060830181905260048401546080840181905260059094015460a090930183905290989697969095509193509150565b6001600160a01b03811660009081526006602052604090206003015460ff1615156001141561222f576122a1565b6001600160a01b03811660009081526006602090815260408083206003808201805460ff19166001908117909155600a90945291909320015460ff161515141561227957506122a1565b506001600160a01b0381166000908152600a60205260409020600301805460ff191660011790555b50565b6020810151156123ae5760006122d7670de0b6b3a7640000610949856020015185602001516123b490919063ffffffff16565b90506122fe6122f3836040015183612a3690919063ffffffff16565b60808401519061265f565b6001600160a01b038681166000908152600760209081526040808320938916835292815291812060048101939093556002909201839055848101519084015161235491670de0b6b3a764000091610949916123b4565b905061237b612370846060015183612a3690919063ffffffff16565b60a08501519061265f565b6001600160a01b038781166000908152600760209081526040808320938a16835292905220600581019190915560030155505b50505050565b6000826123c357506000611304565b828202828482816123d057fe5b04146118a35760405162461bcd60e51b815260040180806020018281038252602181526020018061331c6021913960400191505060405180910390fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526123ae908590612dcf565b6001600160a01b038083166000908152600b602090815260408083209385168352929052206001015415610dbb576001600160a01b038083166000908152600a60209081526040808320600190810154600b84528285209587168552949092528220015490916124e591670de0b6b3a76400009161094991906123b4565b6001600160a01b038085166000908152600b602090815260408083209387168352929052206002015490915061254f90612520908390612a36565b6001600160a01b038086166000908152600b60209081526040808320938816835292905220600401549061265f565b6001600160a01b038085166000818152600b60209081526040808320948816808452858352818420600481019790975560028701889055938352600a82528220600190810154938352939052919092015490916125ba91670de0b6b3a76400009161094991906123b4565b6001600160a01b038086166000908152600b6020908152604080832093881683529290522060030154909150612624906125f5908390612a36565b6001600160a01b038087166000908152600b60209081526040808320938916835292905220600501549061265f565b6001600160a01b039485166000908152600b602090815260408083209690971682529490945293909220600581019390935550600390910155565b6000828201838110156118a3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080821161270f576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161271857fe5b049392505050565b6001546040805163774785bd60e11b81526001600160a01b0387811660048301529151600093929092169163ee8f0b7a91602480820192602092909190829003018186803b15801561277157600080fd5b505afa158015612785573d6000803e3d6000fd5b505050506040513d602081101561279b57600080fd5b505190506001600160a01b0381166127ed576040805162461bcd60e51b815260206004820152601060248201526f75736572206e6f74207265676973746560801b604482015290519081900360640190fd5b6127f5613222565b506001600160a01b0384166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606082015261284e61324c565b506001600160a01b038086166000908152600b60209081526040808320938616835292815290829020825160c08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a08201526128c686888484612e80565b83156112d3576001600160a01b0380871660009081526007602090815260408083209387168352929052206001015415612920578151612906908561265f565b6001600160a01b0387166000908152600a60205260409020555b805161292c908561265f565b6001600160a01b038088166000908152600b60209081526040808320938816835292905220600101558051612961908661265f565b6001600160a01b038088166000908152600b6020908152604080832093881683529281529190209190915582810151908201516129b191670de0b6b3a7640000916109499190610943908961265f565b6001600160a01b038088166000908152600b602090815260408083209388168352928152908290206002019290925583015190820151612a0491670de0b6b3a7640000916109499190610943908961265f565b6001600160a01b038088166000908152600b602090815260408083209388168352929052206003015550505050505050565b600082821115612a8d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526112d8908490612dcf565b3390565b6001546040805163774785bd60e11b81526001600160a01b0387811660048301529151600093929092169163ee8f0b7a91602480820192602092909190829003018186803b158015612b3a57600080fd5b505afa158015612b4e573d6000803e3d6000fd5b505050506040513d6020811015612b6457600080fd5b505190506001600160a01b038116612bb6576040805162461bcd60e51b815260206004820152601060248201526f75736572206e6f74207265676973746560801b604482015290519081900360640190fd5b612bbe613222565b506001600160a01b0384166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff1615156060820152612c1761324c565b506001600160a01b038086166000908152600b60209081526040808320938616835292815290829020825160c08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a0820152612c8f86338484612e80565b8315612d51576001600160a01b0380871660009081526007602090815260408083209387168352929052206001015415612ce9578151612ccf9085612a36565b6001600160a01b0387166000908152600a60205260409020555b8051612cf59085612a36565b6001600160a01b038088166000908152600b60209081526040808320938816835292905220600101558051612d2a9086612a36565b6001600160a01b038088166000908152600b60209081526040808320938816835292905220555b612d7c670de0b6b3a76400006109498460200151610943888660200151612a3690919063ffffffff16565b6001600160a01b038088166000908152600b602090815260408083209388168352928152908290206002019290925583015190820151612a0491670de0b6b3a76400009161094991906109439089612a36565b6060612e24826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130059092919063ffffffff16565b8051909150156112d857808060200190516020811015612e4357600080fd5b50516112d85760405162461bcd60e51b815260040180806020018281038252602a81526020018061333d602a913960400191505060405180910390fd5b6020810151156123ae576001600160a01b03808516600090815260076020908152604080832093871683529281529181206001015484830151928401519092612ed791670de0b6b3a76400009161094991906123b4565b90508115612f2e57612f04612ef9846040015183612a3690919063ffffffff16565b60808501519061265f565b6001600160a01b038088166000908152600b60209081526040808320938a16835292905220600401555b6001600160a01b038087166000908152600b60209081526040808320938916835292815291812060020183905585820151918501519091612f7d91670de0b6b3a76400009161094991906123b4565b90508215612fd457612faa612f9f856060015183612a3690919063ffffffff16565b60a08601519061265f565b6001600160a01b038089166000908152600b60209081526040808320938b16835292905220600501555b6001600160a01b038088166000908152600b60209081526040808320938a1683529290522060030155505050505050565b6060613014848460008561301c565b949350505050565b60608247101561305d5760405162461bcd60e51b81526004018080602001828103825260268152602001806132d16026913960400191505060405180910390fd5b61306685613178565b6130b7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106130f65780518252601f1990920191602091820191016130d7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613158576040519150601f19603f3d011682016040523d82523d6000602084013e61315d565b606091505b509150915061316d82828661317e565b979650505050505050565b3b151590565b6060831561318d5750816118a3565b82511561319d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131e75781810151838201526020016131cf565b50505050905090810190601f1680156132145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806080016040528060008152602001600081526020016000815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c6f6e6c7920736e617073686f7443726561746543616c6c65722063616e20646f2074686973536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220355441edcb523296f467a761c0e84c15416815e55b9b6db10c4cd58f0a4a211864736f6c63430007020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063ceb04d531161007c578063ceb04d53146104d9578063cefbc4961461050f578063f2801fe714610535578063f2fde38b14610563578063f3fef3a314610589578063f741198f146105b557610158565b8063715018a61461042c5780638da5cb5b146104345780638f2a1e5114610458578063964f55171461047e578063970875ce1461049b578063a260988c146104a357610158565b80632526da0e116101155780632526da0e146102ee57806329aaf8731461031c5780632cae426b146103525780632d2d55eb146103925780633cb79e64146103c05780634036ab78146103f657610158565b806306bfa9381461015d57806308cc72d8146101a15780630efe6a8b146101fd5780630f208beb14610231578063132f129f1461029257806315d68ed7146102c0575b600080fd5b6101836004803603602081101561017357600080fd5b50356001600160a01b03166105e3565b60408051938452602084019290925282820152519081900360600190f35b6101d7600480360360608110156101b757600080fd5b506001600160a01b03813581169160208101359091169060400135610649565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61022f6004803603606081101561021357600080fd5b506001600160a01b03813516906020810135906040013561069b565b005b61025f6004803603604081101561024757600080fd5b506001600160a01b0381358116916020013516610a7b565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b61022f600480360360408110156102a857600080fd5b506001600160a01b0381358116916020013516610abb565b61022f600480360360408110156102d657600080fd5b506001600160a01b0381358116916020013516610dbf565b61025f6004803603604081101561030457600080fd5b506001600160a01b0381358116916020013516611031565b61022f6004803603606081101561033257600080fd5b506001600160a01b03813581169160208101359091169060400135611071565b6103806004803603604081101561036857600080fd5b506001600160a01b03813581169160200135166112dd565b60408051918252519081900360200190f35b610380600480360360408110156103a857600080fd5b506001600160a01b038135811691602001351661130a565b61022f600480360360608110156103d657600080fd5b506001600160a01b038135811691602081013590911690604001356113ca565b6104136004803603602081101561040c57600080fd5b503561161e565b6040805192835260208301919091528051918290030190f35b61022f6116bd565b61043c61177b565b604080516001600160a01b039092168252519081900360200190f35b61022f6004803603602081101561046e57600080fd5b50356001600160a01b031661178a565b61022f6004803603602081101561049457600080fd5b5035611820565b61038061186e565b610380600480360360608110156104b957600080fd5b506001600160a01b03813581169160208101359091169060400135611874565b610380600480360360608110156104ef57600080fd5b506001600160a01b038135811691602081013590911690604001356118aa565b6101836004803603602081101561052557600080fd5b50356001600160a01b03166118cd565b61025f6004803603604081101561054b57600080fd5b506001600160a01b0381358116916020013516611933565b61022f6004803603602081101561057957600080fd5b50356001600160a01b03166119c8565b61022f6004803603604081101561059f57600080fd5b506001600160a01b038135169060200135611adc565b61025f600480360360408110156105cb57600080fd5b506001600160a01b038135811691602001351661216c565b60008060006105f0613222565b505050506001600160a01b0316600090815260066020908152604091829020825160808101845281548082526001830154938201849052600283015494820185905260039092015460ff16151560609091015292909190565b6008602052826000526040600020602052816000526040600020818154811061066e57fe5b60009182526020909120600490910201805460018201546002830154600390930154919550935090915084565b6106a483612201565b6000806106b08361161e565b915091506106bc613222565b506001600160a01b03851660009081526006602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606082015261071561324c565b506001600160a01b03861660009081526007602090815260408083203380855290835292819020815160c0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015460a08201529061078b90889084846122a4565b600061079787866123b4565b90508615610a1d576107ab8833308a61240d565b6001600160a01b0388166000908152600860209081526040808320338452825280832081516080810183528b81528084018681529281018b8152428a01606083019081528354600181810186559488529686902092516004909702909201958655925191850191909155905160028401555160039092019190915582015161088c576108378833612467565b6001600160a01b0388166000818152600b60209081526040808320338452825280832060010154938352600a9091529020546108729161265f565b6001600160a01b0389166000908152600a60205260409020555b8251610898908261265f565b6001600160a01b0389166000908152600660209081526040909120919091558201516108c4908261265f565b6001600160a01b038916600090815260076020908152604080832033845290915290206001015581516108f7908861265f565b6001600160a01b0389166000908152600760209081526040808320338452825290912091909155838101519083015161094f91670de0b6b3a7640000916109499190610943908661265f565b906123b4565b906126b9565b6001600160a01b0389166000908152600760209081526040808320338452825291829020600201929092558401519083015161099e91670de0b6b3a7640000916109499190610943908661265f565b6001600160a01b03891660008181526007602090815260408083203380855290835281842060030195909555928252600981528282209382529283528181208982529092529020546109f0908861265f565b6001600160a01b038916600090815260096020908152604080832033845282528083208a84529091529020555b610a2933898984612720565b604080518881526020810188905281516001600160a01b038b169233927fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7929081900390910190a35050505050505050565b6007602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b6000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610af657600080fd5b505afa158015610b0a573d6000803e3d6000fd5b505050506040513d6020811015610b2057600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0386169163d21220a7916004808301926020929190829003018186803b158015610b6857600080fd5b505afa158015610b7c573d6000803e3d6000fd5b505050506040513d6020811015610b9257600080fd5b50516001600160a01b038516600090815260076020908152604080832033845290915290205490915080610bc857505050610dbb565b826001600160a01b0316846001600160a01b03161415610ca2576001600160a01b0385166000908152600a60209081526040808320600190810154600b8452828520338652909352922091820154600283015460049093015491929091610c4f81610c4984610c43670de0b6b3a76400006109498a8a6123b4565b90612a36565b9061265f565b9450610c67670de0b6b3a764000061094986866123b4565b6001600160a01b038a166000908152600b602090815260408083203384529091528120600281019290925560049091015550610dac92505050565b816001600160a01b0316846001600160a01b03161415610d6f576001600160a01b0385166000908152600a6020908152604080832060020154600b835281842033855290925290912060018101546003820154600590920154909190610d1c81610c4984610c43670de0b6b3a76400006109498a8a6123b4565b9450610d34670de0b6b3a764000061094986866123b4565b6001600160a01b038a166000908152600b602090815260408083203384529091528120600381019290925560059091015550610dac92505050565b6040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b610db7843383612a93565b5050505b5050565b6000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610dfa57600080fd5b505afa158015610e0e573d6000803e3d6000fd5b505050506040513d6020811015610e2457600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0386169163d21220a7916004808301926020929190829003018186803b158015610e6c57600080fd5b505afa158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b5051905060006001600160a01b038481169084161415610f64576001600160a01b038516600090815260066020908152604080832060019081015460078452828520338652909352922091820154600283015460049093015491929091610f1181610c4984610c43670de0b6b3a76400006109498a8a6123b4565b9450610f29670de0b6b3a764000061094986866123b4565b6001600160a01b038a1660009081526007602090815260408083203384529091528120600281019290925560049091015550610dac92505050565b816001600160a01b0316846001600160a01b03161415610d6f576001600160a01b0385166000908152600660209081526040808320600201546007835281842033855290925290912060018101546003820154600590920154909190610fde81610c4984610c43670de0b6b3a76400006109498a8a6123b4565b9450610ff6670de0b6b3a764000061094986866123b4565b6001600160a01b038a1660009081526007602090815260408083203384529091528120600381019290925560059091015550610dac92505050565b600b602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b61107a83612201565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d60208110156110df57600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0387169163d21220a7916004808301926020929190829003018186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d602081101561115157600080fd5b505190506001600160a01b0384811690831614806111805750806001600160a01b0316846001600160a01b0316145b6111c1576040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b6001600160a01b03848116908316146111dc8533308761240d565b6111e4613222565b506001600160a01b038616600090815260066020908152604091829020825160808101845281548082526001830154938201939093526002820154938101939093526003015460ff161515606083015261124157505050506112d8565b811561128f57805161126e906112639061094988670de0b6b3a76400006123b4565b60208301519061265f565b6001600160a01b0388166000908152600660205260409020600101556112d3565b80516112b6906112ab9061094988670de0b6b3a76400006123b4565b60408301519061265f565b6001600160a01b0388166000908152600660205260409020600201555b505050505b505050565b6001600160a01b038083166000908152600b60209081526040808320938516835292905220545b92915050565b60006002546000141561134357506001600160a01b03808316600090815260076020908152604080832093851683529290522054611304565b6002546001600160a01b03808516600090815260036020908152604080832093871683529290522054141561139e57506001600160a01b03808316600090815260046020908152604080832093851683529290522054611304565b506001600160a01b03808316600090815260076020908152604080832093851683529290522054611304565b6113d383612201565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561140e57600080fd5b505afa158015611422573d6000803e3d6000fd5b505050506040513d602081101561143857600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0387169163d21220a7916004808301926020929190829003018186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d60208110156114aa57600080fd5b505190506001600160a01b0384811690831614806114d95750806001600160a01b0316846001600160a01b0316145b61151a576040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b6001600160a01b03848116908316146115358533308761240d565b61153d613222565b506001600160a01b0386166000908152600a6020908152604091829020825160808101845281548082526001830154938201939093526002820154938101939093526003015460ff161515606083015261159a57505050506112d8565b81156115dd5780516115bc906112639061094988670de0b6b3a76400006123b4565b6001600160a01b0388166000908152600a60205260409020600101556112d3565b80516115f9906112ab9061094988670de0b6b3a76400006123b4565b6001600160a01b0388166000908152600a602052604090206002015550505050505050565b6000808261163257506003905060006116b8565b82600114156116495750600a905062278d006116b8565b82600214156116605750600f90506276a7006116b8565b82600314156116785750601e90506301da9c006116b8565b6040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c206c6f636b5479706560801b604482015290519081900360640190fd5b915091565b6116c5612ae5565b6001600160a01b03166116d661177b565b6001600160a01b031614611731576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b611792612ae5565b6001600160a01b03166117a361177b565b6001600160a01b0316146117fe576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146118695760405162461bcd60e51b81526004018080602001828103825260258152602001806132f76025913960400191505060405180910390fd5b600255565b60025481565b6001600160a01b0380841660009081526009602090815260408083209386168352928152828220848352905220545b9392505050565b600960209081526000938452604080852082529284528284209052825290205481565b60008060006118da613222565b505050506001600160a01b03166000908152600a6020908152604091829020825160808101845281548082526001830154938201849052600283015494820185905260039092015460ff16151560609091015292909190565b60008060008060008061194461324c565b505050506001600160a01b039485166000908152600760209081526040808320969097168252948552859020855160c08101875281548082526001830154968201879052600283015497820188905260038301546060830181905260048401546080840181905260059094015460a090930183905290989697969095509193509150565b6119d0612ae5565b6001600160a01b03166119e161177b565b6001600160a01b031614611a3c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611a815760405162461bcd60e51b81526004018080602001828103825260268152602001806132ab6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600860209081526040808320338452909152902054808210611b45576040805162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081b1bd8dad25160921b604482015290519081900360640190fd5b611b4d613282565b6001600160a01b03841660009081526008602090815260408083203384529091529020805484908110611b7c57fe5b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060600151421015611c0d576040805162461bcd60e51b81526020600482015260126024820152716e6f74207468652072696768742074696d6560701b604482015290519081900360640190fd5b611c15613222565b506001600160a01b03841660009081526006602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff1615156060820152611c6e61324c565b506001600160a01b03851660009081526007602090815260408083203380855290835292819020815160c0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015460a082015290611ce490879084846122a4565b60208301518251611cf491612a36565b6001600160a01b0387166000908152600660209081526040909120919091558381015190820151611d2491612a36565b6001600160a01b038716600090815260076020908152604080832033845290915290206001015582518151611d5891612a36565b6001600160a01b0387166000818152600760209081526040808320338085529083528184209590955587519383526009825280832094835293815283822087850151835290529190912054611dac91612a36565b6001600160a01b0387166000908152600960209081526040808320338452825280832087820151845282529091209190915583810151908201511415611e4b57611df68633612467565b6001600160a01b0386166000818152600b60209081526040808320338452825280832060010154938352600a909152902054611e3191612a36565b6001600160a01b0387166000908152600a60205260409020555b825115611e6157611e6186338560000151612a93565b825160208401516000198601871461200357611e7b613282565b6001600160a01b0389166000908152600860209081526040808320338452909152902080546000198901908110611eae57fe5b60009182526020808320604080516080810182526004909402909101805480855260018201548585015260028201548584015260039091015460608501526001600160a01b038e168552600883528185203386529092529092208054919350908a908110611f1857fe5b60009182526020808320600490920290910192909255828201516001600160a01b038c16825260088352604080832033845290935291902080548a908110611f5c57fe5b60009182526020808320600160049093020191909101929092556040808401516001600160a01b038d16835260088452818320338452909352902080548a908110611fa357fe5b600091825260208083206002600490930201919091019290925560608301516001600160a01b038c16825260088352604080832033845290935291902080548a908110611fec57fe5b906000526020600020906004020160030181905550505b6001600160a01b0388166000908152600860209081526040808320338452909152902080548061202f57fe5b600082815260208082206004600019909401938402018281556001810183905560028101839055600301919091559155848101519084015161208491670de0b6b3a76400009161094991906109439086612a36565b6001600160a01b038916600090815260076020908152604080832033845282529182902060020192909255850151908401516120d391670de0b6b3a76400009161094991906109439086612a36565b6001600160a01b03891660009081526007602090815260408083203380855292529091206003019190915561210a90898484612ae9565b845160208087015160408089015181518c815293840194909452828101919091526060820192909252905133917fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def35919081900360800190a25050505050505050565b60008060008060008061217d61324c565b505050506001600160a01b039485166000908152600b60209081526040808320969097168252948552859020855160c08101875281548082526001830154968201879052600283015497820188905260038301546060830181905260048401546080840181905260059094015460a090930183905290989697969095509193509150565b6001600160a01b03811660009081526006602052604090206003015460ff1615156001141561222f576122a1565b6001600160a01b03811660009081526006602090815260408083206003808201805460ff19166001908117909155600a90945291909320015460ff161515141561227957506122a1565b506001600160a01b0381166000908152600a60205260409020600301805460ff191660011790555b50565b6020810151156123ae5760006122d7670de0b6b3a7640000610949856020015185602001516123b490919063ffffffff16565b90506122fe6122f3836040015183612a3690919063ffffffff16565b60808401519061265f565b6001600160a01b038681166000908152600760209081526040808320938916835292815291812060048101939093556002909201839055848101519084015161235491670de0b6b3a764000091610949916123b4565b905061237b612370846060015183612a3690919063ffffffff16565b60a08501519061265f565b6001600160a01b038781166000908152600760209081526040808320938a16835292905220600581019190915560030155505b50505050565b6000826123c357506000611304565b828202828482816123d057fe5b04146118a35760405162461bcd60e51b815260040180806020018281038252602181526020018061331c6021913960400191505060405180910390fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526123ae908590612dcf565b6001600160a01b038083166000908152600b602090815260408083209385168352929052206001015415610dbb576001600160a01b038083166000908152600a60209081526040808320600190810154600b84528285209587168552949092528220015490916124e591670de0b6b3a76400009161094991906123b4565b6001600160a01b038085166000908152600b602090815260408083209387168352929052206002015490915061254f90612520908390612a36565b6001600160a01b038086166000908152600b60209081526040808320938816835292905220600401549061265f565b6001600160a01b038085166000818152600b60209081526040808320948816808452858352818420600481019790975560028701889055938352600a82528220600190810154938352939052919092015490916125ba91670de0b6b3a76400009161094991906123b4565b6001600160a01b038086166000908152600b6020908152604080832093881683529290522060030154909150612624906125f5908390612a36565b6001600160a01b038087166000908152600b60209081526040808320938916835292905220600501549061265f565b6001600160a01b039485166000908152600b602090815260408083209690971682529490945293909220600581019390935550600390910155565b6000828201838110156118a3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080821161270f576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161271857fe5b049392505050565b6001546040805163774785bd60e11b81526001600160a01b0387811660048301529151600093929092169163ee8f0b7a91602480820192602092909190829003018186803b15801561277157600080fd5b505afa158015612785573d6000803e3d6000fd5b505050506040513d602081101561279b57600080fd5b505190506001600160a01b0381166127ed576040805162461bcd60e51b815260206004820152601060248201526f75736572206e6f74207265676973746560801b604482015290519081900360640190fd5b6127f5613222565b506001600160a01b0384166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606082015261284e61324c565b506001600160a01b038086166000908152600b60209081526040808320938616835292815290829020825160c08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a08201526128c686888484612e80565b83156112d3576001600160a01b0380871660009081526007602090815260408083209387168352929052206001015415612920578151612906908561265f565b6001600160a01b0387166000908152600a60205260409020555b805161292c908561265f565b6001600160a01b038088166000908152600b60209081526040808320938816835292905220600101558051612961908661265f565b6001600160a01b038088166000908152600b6020908152604080832093881683529281529190209190915582810151908201516129b191670de0b6b3a7640000916109499190610943908961265f565b6001600160a01b038088166000908152600b602090815260408083209388168352928152908290206002019290925583015190820151612a0491670de0b6b3a7640000916109499190610943908961265f565b6001600160a01b038088166000908152600b602090815260408083209388168352929052206003015550505050505050565b600082821115612a8d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526112d8908490612dcf565b3390565b6001546040805163774785bd60e11b81526001600160a01b0387811660048301529151600093929092169163ee8f0b7a91602480820192602092909190829003018186803b158015612b3a57600080fd5b505afa158015612b4e573d6000803e3d6000fd5b505050506040513d6020811015612b6457600080fd5b505190506001600160a01b038116612bb6576040805162461bcd60e51b815260206004820152601060248201526f75736572206e6f74207265676973746560801b604482015290519081900360640190fd5b612bbe613222565b506001600160a01b0384166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff1615156060820152612c1761324c565b506001600160a01b038086166000908152600b60209081526040808320938616835292815290829020825160c08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a0820152612c8f86338484612e80565b8315612d51576001600160a01b0380871660009081526007602090815260408083209387168352929052206001015415612ce9578151612ccf9085612a36565b6001600160a01b0387166000908152600a60205260409020555b8051612cf59085612a36565b6001600160a01b038088166000908152600b60209081526040808320938816835292905220600101558051612d2a9086612a36565b6001600160a01b038088166000908152600b60209081526040808320938816835292905220555b612d7c670de0b6b3a76400006109498460200151610943888660200151612a3690919063ffffffff16565b6001600160a01b038088166000908152600b602090815260408083209388168352928152908290206002019290925583015190820151612a0491670de0b6b3a76400009161094991906109439089612a36565b6060612e24826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130059092919063ffffffff16565b8051909150156112d857808060200190516020811015612e4357600080fd5b50516112d85760405162461bcd60e51b815260040180806020018281038252602a81526020018061333d602a913960400191505060405180910390fd5b6020810151156123ae576001600160a01b03808516600090815260076020908152604080832093871683529281529181206001015484830151928401519092612ed791670de0b6b3a76400009161094991906123b4565b90508115612f2e57612f04612ef9846040015183612a3690919063ffffffff16565b60808501519061265f565b6001600160a01b038088166000908152600b60209081526040808320938a16835292905220600401555b6001600160a01b038087166000908152600b60209081526040808320938916835292815291812060020183905585820151918501519091612f7d91670de0b6b3a76400009161094991906123b4565b90508215612fd457612faa612f9f856060015183612a3690919063ffffffff16565b60a08601519061265f565b6001600160a01b038089166000908152600b60209081526040808320938b16835292905220600501555b6001600160a01b038088166000908152600b60209081526040808320938a1683529290522060030155505050505050565b6060613014848460008561301c565b949350505050565b60608247101561305d5760405162461bcd60e51b81526004018080602001828103825260268152602001806132d16026913960400191505060405180910390fd5b61306685613178565b6130b7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106130f65780518252601f1990920191602091820191016130d7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613158576040519150601f19603f3d011682016040523d82523d6000602084013e61315d565b606091505b509150915061316d82828661317e565b979650505050505050565b3b151590565b6060831561318d5750816118a3565b82511561319d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131e75781810151838201526020016131cf565b50505050905090810190601f1680156132145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806080016040528060008152602001600081526020016000815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c6f6e6c7920736e617073686f7443726561746543616c6c65722063616e20646f2074686973536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220355441edcb523296f467a761c0e84c15416815e55b9b6db10c4cd58f0a4a211864736f6c63430007020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4043,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "user",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUser)7464"
      },
      {
        "astId": 4045,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "currentSnapshotId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4051,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "userSnapshotId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4057,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "userSnapshotAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4059,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "snapshotCreateCaller",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4094,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(IKeplerPair)7091,t_struct(PoolInfo)4090_storage)"
      },
      {
        "astId": 4100,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_struct(UserInfo)4081_storage))"
      },
      {
        "astId": 4107,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "userLockInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_array(t_struct(UserLockInfo)4068_storage)dyn_storage))"
      },
      {
        "astId": 4115,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "userLockTypeAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 4119,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "inviterPoolInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_contract(IKeplerPair)7091,t_struct(PoolInfo)4090_storage)"
      },
      {
        "astId": 4125,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "inviterUserInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_struct(UserInfo)4081_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(UserLockInfo)4068_storage)dyn_storage": {
        "base": "t_struct(UserLockInfo)4068_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChef.UserLockInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IKeplerPair)7091": {
        "encoding": "inplace",
        "label": "contract IKeplerPair",
        "numberOfBytes": "20"
      },
      "t_contract(IUser)7464": {
        "encoding": "inplace",
        "label": "contract IUser",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(UserLockInfo)4068_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.UserLockInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserLockInfo)4068_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)4081_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4081_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_array(t_struct(UserLockInfo)4068_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)7091",
        "label": "mapping(contract IKeplerPair => mapping(address => struct MasterChef.UserLockInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(UserLockInfo)4068_storage)dyn_storage)"
      },
      "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)7091",
        "label": "mapping(contract IKeplerPair => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_struct(UserInfo)4081_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)7091",
        "label": "mapping(contract IKeplerPair => mapping(address => struct MasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)4081_storage)"
      },
      "t_mapping(t_contract(IKeplerPair)7091,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)7091",
        "label": "mapping(contract IKeplerPair => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IKeplerPair)7091,t_struct(PoolInfo)4090_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)7091",
        "label": "mapping(contract IKeplerPair => struct MasterChef.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)4090_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)4090_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.PoolInfo",
        "members": [
          {
            "astId": 4083,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "totalShares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4085,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "token0AccPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4087,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "token1AccPerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4089,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "avaliable",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)4081_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.UserInfo",
        "members": [
          {
            "astId": 4070,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4072,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4074,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "token0Debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4076,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "token1Debt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4078,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "token0Pending",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4080,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "token1Pending",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserLockInfo)4068_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.UserLockInfo",
        "members": [
          {
            "astId": 4061,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4063,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4065,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "lockType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4067,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "expireAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}